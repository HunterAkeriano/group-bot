import dotenv from 'dotenv';
import fs from 'fs';
import { Telegraf, Markup } from 'telegraf';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({
    model: 'gemini-2.0-flash',
    generationConfig: {
        temperature: 0.95,
        maxOutputTokens: 2048,
        topP: 0.9,
        topK: 40
    }
});

const ALLOWED_USERNAMES_STRING = process.env.ALLOWED_USERNAMES || '';
const ALLOWED_USERNAMES = ALLOWED_USERNAMES_STRING.split(',').map(name => name.trim().toLowerCase()).filter(name => name.length > 0);

const USED_TOPICS_FILE = './used_topics.json';
let usedTopics = [];

if (fs.existsSync(USED_TOPICS_FILE)) {
    try {
        usedTopics = JSON.parse(fs.readFileSync(USED_TOPICS_FILE, 'utf-8'));
    } catch {
        usedTopics = [];
    }
}

function getText(result) {
    return (
        result?.response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
        result?.response?.text?.trim() ||
        ''
    );
}

function similarityRatio(a, b) {
    a = a.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    b = b.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    if (!a.length || !b.length) return 0;
    let same = 0;
    for (let i = 0; i < Math.min(a.length, b.length); i++) {
        if (a[i] === b[i]) same++;
    }
    return same / Math.max(a.length, b.length);
}

function isDuplicateIdea(newText) {
    return usedTopics.some(oldText => similarityRatio(oldText, newText) > 0.8);
}

function saveUsedTopic(topic) {
    usedTopics.push(topic);
    if (usedTopics.length > 500) {
        usedTopics = usedTopics.slice(-500);
    }
    fs.writeFileSync(USED_TOPICS_FILE, JSON.stringify(usedTopics, null, 2));
}

const activeGenerations = new Map();
const userBlogTopics = new Map();
const userTaskTopics = new Map();
const userQuizTopics = new Map();
const userQuoteTopics = new Map();
const userStoryTopics = new Map();
const userCurrentMode = new Map();

function protectedGeneration(ctx, type, generator) {
    const chatId = ctx.chat.id;
    const messageId = ctx.message?.message_id;

    if (activeGenerations.has(chatId)) {
        ctx.reply('‚è≥ **–£–í–ê–ì–ê!** –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—á–µ–∫–∞–π ‚úã', { parse_mode: 'Markdown' });
        return;
    }

    activeGenerations.set(chatId, { type, messageId, startTime: Date.now() });

    (async () => {
        try {
            await generator(ctx);
        } catch (error) {
            console.error('‚ùå Generation error:', error);
            ctx.reply('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        } finally {
            activeGenerations.delete(chatId);
        }
    })();
}

function cleanPostText(text) {
    return text.replace(/[*_`<>]/g, '').replace(/\n{3,}/g, '\n\n').trim();
}

function getMainMenuKeyboard() {
    return Markup.keyboard([
        ['üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', 'üß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'],
        ['üé≠ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', 'üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É'],
        ['üìñ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é']
    ]).resize();
}

function getTopicsKeyboard(topics, regenerateText = 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏') {
    const keyboard = [];
    for (let i = 0; i < topics.length; i += 2) {
        if (i + 1 < topics.length) {
            keyboard.push([topics[i], topics[i + 1]]);
        } else {
            keyboard.push([topics[i]]);
        }
    }
    keyboard.push([regenerateText]);
    keyboard.push(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']);
    return Markup.keyboard(keyboard).resize();
}

function checkAccess(ctx) {
    if (ALLOWED_USERNAMES.length === 0) return true;
    const userUsername = ctx.from?.username?.toLowerCase();

    if (userUsername && ALLOWED_USERNAMES.includes(userUsername)) {
        return true;
    }
    ctx.reply('‚ùå –ó–∞–π–Ω—è—Ç–∏–π. –Ü–¥–∏ –Ω–∞—Ö—É–π.', getMainMenuKeyboard());
    return false;
}

bot.start(async ctx => {
    if (!checkAccess(ctx)) return;

    const chatId = ctx.chat.id;
    userCurrentMode.delete(chatId);
    await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', getMainMenuKeyboard());
});

async function generateBlogTopics(ctx, numTopics = 5) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üåÄ –ì–µ–Ω–µ—Ä—É—é ${numTopics} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–¥–µ–π –¥–ª—è –±–ª–æ–≥—É...`);

    const ideaPrompt = `
–ü—Ä–∏–¥—É–º–∞–π ${numTopics} –∫–æ—Ä–æ—Ç–∫–∏—Ö, –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö —ñ–¥–µ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É –ø—Ä–æ —Ä–æ–±–æ—Ç—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞, –∂–∏—Ç—Ç—è —É —Å—Ñ–µ—Ä—ñ IT, VUE, JS, –≤–µ—Ä—Å—Ç–∫—É, TS, –º–æ—Ç–∏–≤–∞—Ü—ñ—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, AI –∞–±–æ Node.js.
–ö–æ–∂–Ω–∞ —ñ–¥–µ—è:
- –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤
- –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ
- –±–µ–∑ –ª–∞–ø–æ–∫
- –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∞ –∑ 1 –¥–æ ${numTopics}
–§–æ—Ä–º–∞—Ç:
1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
2) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
...
`;

    const result = await model.generateContent([ideaPrompt]);
    const text = getText(result);

    const lines = text.split('\n').filter(l => l.trim());
    const newTopics = [];

    for (const line of lines) {
        const match = line.match(/^\d+\)\s*(.+)$/);
        if (match && newTopics.length < numTopics) {
            const idea = match[1].trim();
            if (!isDuplicateIdea(idea)) {
                newTopics.push(idea);
            }
        }
    }

    if (newTopics.length === 0) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏—Ö —Ç–µ–º üòÖ', getMainMenuKeyboard());
        return;
    }

    userBlogTopics.set(chatId, newTopics);
    userCurrentMode.set(chatId, 'blog');

    await ctx.reply('–û–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –±–ª–æ–≥—É:', getTopicsKeyboard(newTopics, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏'));
}

async function generateBlogPost(ctx, text) {
    const chatId = ctx.chat.id;

    await ctx.reply(`‚ú® **–Ü–¥–µ—è –¥–ª—è –±–ª–æ–≥—É:**\n\n${text}`, { parse_mode: 'Markdown' });
    await ctx.reply('‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –±–ª–æ–≥-–ø–æ—Å—Ç...');

    const postPrompt = `–°—Ç–≤–æ—Ä–∏ –≤–µ–ª–∏–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (1500 —Å–∏–º–≤–æ–ª—ñ–≤) —É —Å—Ç–∏–ª—ñ —Å—É—á–∞—Å–Ω–æ–≥–æ IT-–±–ª–æ–≥—É. –¢–µ–º–∞: "${text}"`;
    const postRes = await model.generateContent([postPrompt]);
    const postText = getText(postRes);

    if (!postText) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ üòî', getMainMenuKeyboard());
        return;
    }

    const styledPost = cleanPostText(postText);

    saveUsedTopic(text);
    userBlogTopics.delete(chatId);
    userCurrentMode.delete(chatId);

    await ctx.reply(styledPost, getMainMenuKeyboard());
}

bot.hears('üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'blog_topics', generateBlogTopics);
});

bot.hears('üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏', ctx => {
    if (!checkAccess(ctx)) return;
    const chatId = ctx.chat.id;
    const mode = userCurrentMode.get(chatId);

    if (mode === 'blog') {
        protectedGeneration(ctx, 'blog_topics', generateBlogTopics);
    } else if (mode === 'task') {
        protectedGeneration(ctx, 'task_topics', generateTaskTopics);
    } else if (mode === 'quiz') {
        protectedGeneration(ctx, 'quiz_topics', generateQuizTopics);
    } else if (mode === 'quote') {
        protectedGeneration(ctx, 'quote_topics', generateQuoteTopics);
    } else if (mode === 'story') {
        protectedGeneration(ctx, 'story_topics', generateStoryTopics);
    }
});

async function generateTaskTopics(ctx, numTopics = 5) {
    const chatId = ctx.chat.id;
    await ctx.reply(`‚öôÔ∏è –ì–µ–Ω–µ—Ä—É—é ${numTopics} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö JS-–∑–∞–¥–∞—á...`);

    const ideaPrompt = `
–°—Ç–≤–æ—Ä–∏ ${numTopics} –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤ (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫) –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á –∑ JavaScript (–º–∞—Å–∏–≤–∏, –ª–æ–≥—ñ–∫–∞, –¥–∞—Ç–∏).
–§–æ—Ä–º–∞—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π:
1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
2) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
...
`;

    const result = await model.generateContent([ideaPrompt]);
    const text = getText(result);

    const lines = text.split('\n').filter(l => l.trim());
    const newTopics = [];

    for (const line of lines) {
        const match = line.match(/^\d+\)\s*(.+)$/);
        if (match && newTopics.length < numTopics) {
            const idea = match[1].trim();
            if (!isDuplicateIdea(idea)) {
                newTopics.push(idea);
            }
        }
    }

    if (newTopics.length === 0) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á üòÖ', getMainMenuKeyboard());
        return;
    }

    userTaskTopics.set(chatId, newTopics);
    userCurrentMode.set(chatId, 'task');

    await ctx.reply('–û–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:', getTopicsKeyboard(newTopics, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ'));
}

async function generateTaskPost(ctx, text) {
    const chatId = ctx.chat.id;

    await ctx.reply(`üéØ **–í–∏–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞:** ${text}`, { parse_mode: 'Markdown' });
    await ctx.reply('üîß –ì–µ–Ω–µ—Ä—É—é –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ...');

    const taskPrompt = `–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –ø—Ä–∞–∫—Ç–∏—á–Ω—É –∑–∞–¥–∞—á—É –∑ JavaScript —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –¢–µ–º–∞: "${text}". –§–æ—Ä–º–∞—Ç: üß© –ó–∞–¥–∞—á–∞: –æ–ø–∏—Å, üì¶ –ü—Ä–∏–∫–ª–∞–¥: –∫–æ–¥ JS, üîç –£—Ç–æ—á–Ω–µ–Ω–Ω—è: —É–º–æ–≤–∏. –î–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.`;
    const taskRes = await model.generateContent([taskPrompt]);
    const taskText = getText(taskRes);

    if (!taskText) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ üòî', getMainMenuKeyboard());
        return;
    }

    const styledTask = cleanPostText(taskText);

    saveUsedTopic(text);
    userTaskTopics.delete(chatId);
    userCurrentMode.delete(chatId);

    await ctx.reply(styledTask, getMainMenuKeyboard());
}

bot.hears('üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'task_topics', generateTaskTopics);
});

async function generateQuizTopics(ctx, numTopics = 5) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä—É—é ${numTopics} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–º –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω...`);

    const ideaPrompt = `
–°—Ç–≤–æ—Ä–∏ ${numTopics} –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤ (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫) –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (HTML, CSS, JavaScript –∞–±–æ Vue.js).
–§–æ—Ä–º–∞—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π:
1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
2) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
...
`;

    const result = await model.generateContent([ideaPrompt]);
    const text = getText(result);

    const lines = text.split('\n').filter(l => l.trim());
    const newTopics = [];

    for (const line of lines) {
        const match = line.match(/^\d+\)\s*(.+)$/);
        if (match && newTopics.length < numTopics) {
            newTopics.push(match[1].trim());
        }
    }

    if (newTopics.length < numTopics) {
        let placeholders = [
            '‚ùì JavaScript –ó–∞–º–∏–∫–∞–Ω–Ω—è',
            '‚ùì CSS Grid vs Flexbox',
            '‚ùì –ü—Ä–æ–º—ñ—Å–∏ —Ç–∞ Async/Await',
            '‚ùì –©–æ —Ç–∞–∫–µ Virtual DOM',
            '‚ùì –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤ JS'
        ];

        while (newTopics.length < numTopics && placeholders.length > 0) {
            newTopics.push(placeholders.shift());
        }
    }

    userQuizTopics.set(chatId, newTopics);
    userCurrentMode.set(chatId, 'quiz');

    await ctx.reply('–û–±–µ—Ä–∏ —Ç–µ–º—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:', getTopicsKeyboard(newTopics, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏'));
}

async function generateQuizPost(ctx, text) {
    const chatId = ctx.chat.id;

    await ctx.reply(`üéØ **–í–∏–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:** ${text}`, { parse_mode: 'Markdown' });
    await ctx.reply('üìù –ì–µ–Ω–µ—Ä—É—é –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—Å—Ç...');

    const prompt = `–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –Ω–∞ —Ç–µ–º—É "${text}" (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤). –§–æ—Ä–º–∞—Ç: QUESTION: —Ç–µ–∫—Å—Ç\nOPTIONS:\n1) –≤–∞—Ä—ñ–∞–Ω—Ç\n2) –≤–∞—Ä—ñ–∞–Ω—Ç\n3) –≤–∞—Ä—ñ–∞–Ω—Ç\n4) –≤–∞—Ä—ñ–∞–Ω—Ç\nCORRECT: –Ω–æ–º–µ—Ä\nEXPLANATION: –ø–æ—è—Å–Ω–µ–Ω–Ω—è`;
    const res = await model.generateContent([prompt]);
    const responseText = getText(res);

    const qMatch = responseText.match(/^QUESTION:\s*(.+?)\n/ms);
    if (!qMatch) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ üòî', getMainMenuKeyboard());
        return;
    }

    const question = qMatch[1]?.trim();
    const optionsBlock = responseText.match(/OPTIONS:([\s\S]*?)\nCORRECT:/ms)?.[1] || '';
    const options = optionsBlock.split(/\d\)\s*/).filter(Boolean).map(o => o.trim().slice(0, 70)).filter(o => o.length > 0);
    const correct = Number(responseText.match(/CORRECT:\s*(\d)/)?.[1]) - 1;
    const explanation = responseText.match(/EXPLANATION:\s*(.+)/is)?.[1]?.trim()?.slice(0, 200) || '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ—Å—Ç—ñ!';

    if (!question || options.length < 4 || correct < 0 || correct >= options.length) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ üòî', getMainMenuKeyboard());
        return;
    }

    await ctx.telegram.sendPoll(ctx.chat.id, question, options, {
        type: 'quiz',
        correct_option_id: correct,
        explanation: explanation,
        is_anonymous: true
    });

    const postPrompt = `–°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç (700‚Äì1200 —Å–∏–º–≤–æ–ª—ñ–≤) –¥–ª—è —Ç–µ–º–∏ "${question}" —É —Å—Ç–∏–ª—ñ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.`;
    const postRes = await model.generateContent([postPrompt]);
    const postText = getText(postRes);

    saveUsedTopic(text);
    userQuizTopics.delete(chatId);
    userCurrentMode.delete(chatId);

    if (postText) {
        await ctx.telegram.sendMessage(ctx.chat.id, cleanPostText(postText), getMainMenuKeyboard());
    } else {
        await ctx.reply('‚úÖ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!', getMainMenuKeyboard());
    }
}

bot.hears('üß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'quiz_topics', generateQuizTopics);
});

async function generateQuoteTopics(ctx, numTopics = 10) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üòé –ì–µ–Ω–µ—Ä—É—é ${numTopics} —Ü–∏—Ç–∞—Ç —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞...`);

    const prompt = `
–ü—Ä–∏–¥—É–º–∞–π ${numTopics} –∫–æ—Ä–æ—Ç–∫–∏—Ö, –¥–æ—Ç–µ–ø–Ω–∏—Ö —Ü–∏—Ç–∞—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ø—Ä–æ –∂–∏—Ç—Ç—è –∞–±–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞/–∞–π—Ç—ñ—à–Ω–∏–∫–∞.
–ö–æ–∂–Ω–∞ —Ü–∏—Ç–∞—Ç–∞:
- –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤
- –±–µ–∑ –ª–∞–ø–æ–∫
- –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ
- –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∞ –∑ 1 –¥–æ ${numTopics}
–§–æ—Ä–º–∞—Ç:
1) –µ–º–æ–¥–∑—ñ + —Ü–∏—Ç–∞—Ç–∞
2) –µ–º–æ–¥–∑—ñ + —Ü–∏—Ç–∞—Ç–∞
...
`;
    const result = await model.generateContent([prompt]);
    const text = getText(result);

    const lines = text.split('\n').filter(l => l.trim());
    const newQuotes = [];

    for (const line of lines) {
        const match = line.match(/^\d+\)\s*(.+)$/);
        if (match) {
            newQuotes.push(match[1].trim());
        }
    }

    if (newQuotes.length < 5) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏—Ö —Ü–∏—Ç–∞—Ç üòÖ', getMainMenuKeyboard());
        return;
    }

    userQuoteTopics.set(chatId, newQuotes);
    userCurrentMode.set(chatId, 'quote');

    await ctx.reply('–û–±–µ—Ä–∏ —Ü–∏—Ç–∞—Ç—É:', getTopicsKeyboard(newQuotes, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç–∏'));
}

async function generateQuotePost(ctx, text) {
    const chatId = ctx.chat.id;

    const styledQuote = cleanPostText(text);

    saveUsedTopic(text);
    userQuoteTopics.delete(chatId);
    userCurrentMode.delete(chatId);

    await ctx.reply(`üí¨ **–í–∏–±—Ä–∞–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞:**\n\n${styledQuote}`, { parse_mode: 'Markdown' });
    await ctx.reply('–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–ª—ñ:', getMainMenuKeyboard());
}


bot.hears('üé≠ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'quote_topics', generateQuoteTopics);
});

async function generateStoryTopics(ctx, numTopics = 5) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üìñ –ì–µ–Ω–µ—Ä—É—é ${numTopics} –∫–ª—ñ–∫–±–µ–π—Ç–Ω–∏—Ö —ñ–¥–µ–π –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ–π...`);

    const ideaPrompt = `
–ü—Ä–∏–¥—É–º–∞–π ${numTopics} –∫–æ—Ä–æ—Ç–∫–∏—Ö, –¥—É–∂–µ –∫–ª—ñ–∫–±–µ–π—Ç–Ω–∏—Ö, —à–æ–∫—É—é—á–∏—Ö —ñ–¥–µ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-—ñ—Å—Ç–æ—Ä—ñ–π –ø—Ä–æ IT, –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, –≥—Ä–æ—à—ñ, –Ω–µ–≤–¥–∞—á—ñ, –∫–∞—Ä'—î—Ä—É, —Ñ—Ä—ñ–ª–∞–Ω—Å.
–ö–æ–∂–Ω–∞ —ñ–¥–µ—è:
- –¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤
- –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ (ü§Ø, üí∞, üö®, üò±, üòà)
- –±–µ–∑ –ª–∞–ø–æ–∫
- –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∞ –∑ 1 –¥–æ ${numTopics}
–§–æ—Ä–º–∞—Ç:
1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
2) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞
...
`;

    const result = await model.generateContent([ideaPrompt]);
    const text = getText(result);

    const lines = text.split('\n').filter(l => l.trim());
    const newTopics = [];

    for (const line of lines) {
        const match = line.match(/^\d+\)\s*(.+)$/);
        if (match && newTopics.length < numTopics) {
            const idea = match[1].trim();
            if (!isDuplicateIdea(idea)) {
                newTopics.push(idea);
            }
        }
    }

    if (newTopics.length === 0) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏—Ö —Ç–µ–º –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ–π üòÖ', getMainMenuKeyboard());
        return;
    }

    userStoryTopics.set(chatId, newTopics);
    userCurrentMode.set(chatId, 'story');

    await ctx.reply('–û–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –∫–ª—ñ–∫–±–µ–π—Ç —ñ—Å—Ç–æ—Ä—ñ—ó:', getTopicsKeyboard(newTopics, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏'));
}

async function generateStoryParts(ctx, text) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üö® –í–∏–±—Ä–∞–Ω–∞ –∫–ª—ñ–∫–±–µ–π—Ç —Ç–µ–º–∞:\n\n${text}`);

    const waitMessage = await ctx.reply('üìö –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é...');

    try {
        const prompt = `
–°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∫–ª—ñ–∫–±–µ–π—Ç-—ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏–±–ª–∏–∑–Ω–æ –Ω–∞ 3300 —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —Ç–µ–º—É "${text}".
–†–æ–∑–∫–∞–∂–∏ —ó—ó –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏ (–Ø) —É —Å—Ç–∏–ª—ñ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É.
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–∞—î –±—É—Ç–∏: –ø–æ—á–∞—Ç–æ–∫ (—ñ–Ω—Ç—Ä–∏–≥–∞), —Å–µ—Ä–µ–¥–∏–Ω–∞ (–ø—Ä–æ–±–ª–µ–º–∞/–¥—Ä–∞–º–∞), –∫—ñ–Ω–µ—Ü—å (—Ä–æ–∑–≤'—è–∑–∫–∞, –º–æ—Ä–∞–ª—å).
–ù–µ –ø–∏—à–∏ "–ß–∞—Å—Ç–∏–Ω–∞ 1" –∞–±–æ –ø–æ–¥—ñ–±–Ω–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–≤–∏—á–∞–π–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è.
        `;

        const res = await model.generateContent([prompt]);
        let fullText = getText(res) || '';

        fullText = fullText
            .replace(/[*_`~>#+=|{}[\]]/g, '')
            .replace(/<\/?[^>]+(>|$)/g, '')
            .replace(/\s{2,}/g, ' ')
            .replace(/&[^;\s]+;/g, '')
            .trim();

        if (fullText.length < 500) {
            await ctx.telegram.deleteMessage(chatId, waitMessage.message_id).catch(() => {});
            await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòî', getMainMenuKeyboard());
            return;
        }

        const sentences = fullText.split(/(?<=[.!?])\s+/);
        const targetLen = Math.ceil(sentences.length / 3);
        const parts = [
            sentences.slice(0, targetLen).join(' '),
            sentences.slice(targetLen, targetLen * 2).join(' '),
            sentences.slice(targetLen * 2).join(' ')
        ].map(p => p.trim());

        await ctx.telegram.deleteMessage(chatId, waitMessage.message_id).catch(() => {});

        await ctx.reply(`ü§Ø –Ü—Å—Ç–æ—Ä—ñ—è: ${text} ‚Äì –ß–∞—Å—Ç–∏–Ω–∞ 1/3\n\n${parts[0]}\n\n–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –±—É–¥–µ –∑–∞–≤—Ç—Ä–∞!`);
        await ctx.reply(`üí∞ –Ü—Å—Ç–æ—Ä—ñ—è: ${text} ‚Äì –ß–∞—Å—Ç–∏–Ω–∞ 2/3\n\n${parts[1]}\n\n–ö—ñ–Ω–µ—Ü—å —É–∂–µ –±–ª–∏–∑—å–∫–æ...`);
        await ctx.reply(`‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è: ${text} ‚Äì –ß–∞—Å—Ç–∏–Ω–∞ 3/3 (–†–æ–∑–≤'—è–∑–∫–∞)\n\n${parts[2]}\n\n–ö—ñ–Ω–µ—Ü—å —ñ—Å—Ç–æ—Ä—ñ—ó. –ü–æ–¥—ñ–ª–∏—Å—è –¥—É–º–∫–∞–º–∏!`);

        saveUsedTopic(text);
        await ctx.reply('‚úÖ –£—Å—ñ 3 —á–∞—Å—Ç–∏–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!', getMainMenuKeyboard());
    } catch (error) {
        console.error('‚ùå Story generation error:', error);
        await ctx.telegram.deleteMessage(chatId, waitMessage.message_id).catch(() => {});
        await ctx.reply('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòî', getMainMenuKeyboard());
    } finally {
        userStoryTopics.delete(chatId);
        userCurrentMode.delete(chatId);
    }
}


bot.hears('üìñ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'story_topics', generateStoryTopics);
});


bot.on('text', async ctx => {
    if (!checkAccess(ctx)) return;

    const chatId = ctx.chat.id;
    const text = ctx.message.text;
    const mode = userCurrentMode.get(chatId);

    const MAIN_MENU_BUTTONS = ['üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', 'üß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', 'üé≠ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', 'üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É', 'üìñ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é'];
    const TOPIC_REGENERATE_BUTTONS = ['üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏', 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ', 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏', 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç–∏'];

    if (MAIN_MENU_BUTTONS.includes(text) || TOPIC_REGENERATE_BUTTONS.includes(text)) {
        return;
    }

    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
        userCurrentMode.delete(chatId);
        await ctx.reply('–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', getMainMenuKeyboard());
        return;
    }

    if (mode === 'blog') {
        const topics = userBlogTopics.get(chatId);
        if (topics && topics.includes(text)) {
            protectedGeneration(ctx, 'blog_post', (ctx) => generateBlogPost(ctx, text));
            return;
        }
    }

    if (mode === 'task') {
        const topics = userTaskTopics.get(chatId);
        if (topics && topics.includes(text)) {
            protectedGeneration(ctx, 'task_post', (ctx) => generateTaskPost(ctx, text));
            return;
        }
    }

    if (mode === 'quiz') {
        const topics = userQuizTopics.get(chatId);
        if (topics && topics.includes(text)) {
            protectedGeneration(ctx, 'quiz_post', (ctx) => generateQuizPost(ctx, text));
            return;
        }
    }

    if (mode === 'quote') {
        const topics = userQuoteTopics.get(chatId);
        if (topics && topics.includes(text)) {
            protectedGeneration(ctx, 'quote_post', (ctx) => generateQuotePost(ctx, text));
            return;
        }
    }

    if (mode === 'story') {
        const topics = userStoryTopics.get(chatId);
        if (topics && topics.includes(text)) {
            protectedGeneration(ctx, 'story_parts', (ctx) => generateStoryParts(ctx, text));
        }
    }
});


setInterval(() => {
    const now = Date.now();
    for (const [chatId, data] of activeGenerations.entries()) {
        if (now - data.startTime > 5 * 60 * 1000) activeGenerations.delete(chatId);
    }
}, 60000);

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!');