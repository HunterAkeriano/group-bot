import dotenv from 'dotenv';
import fs from 'fs';
import { Telegraf, Markup } from 'telegraf';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

const USED_TOPICS_FILE = './used_topics.json';
let usedTopics = [];

// --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–µ–º ---

if (fs.existsSync(USED_TOPICS_FILE)) {
    try {
        usedTopics = JSON.parse(fs.readFileSync(USED_TOPICS_FILE, 'utf-8'));
    } catch {
        usedTopics = [];
    }
}

function similarityRatio(a, b) {
    a = a.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    b = b.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    if (!a.length || !b.length) return 0;
    let same = 0;
    for (let i = 0; i < Math.min(a.length, b.length); i++) {
        if (a[i] === b[i]) same++;
    }
    return same / Math.max(a.length, b.length);
}

function isDuplicateIdea(newText) {
    return usedTopics.some(oldText => similarityRatio(oldText, newText) > 0.8);
}

function saveUsedTopic(topic) {
    usedTopics.push(topic);
    // –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–æ–≥–æ —Ñ–∞–π–ª—É
    if (usedTopics.length > 500) {
        usedTopics = usedTopics.slice(-500);
    }
    fs.writeFileSync(USED_TOPICS_FILE, JSON.stringify(usedTopics, null, 2));
}

// --- –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (–ê–Ω—Ç–∏-—Ü–∏–∫–ª) ---

const activeGenerations = new Map();

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥, —â–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.
 * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î/—Å–∫–∏–¥–∞—î –ø—Ä–∞–ø–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è/–¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤.
 */
async function protectedGeneration(ctx, type, generator) {
    const chatId = ctx.chat.id;

    if (activeGenerations.has(chatId)) {
        await ctx.reply('‚è≥ **–£–í–ê–ì–ê!** –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—á–µ–∫–∞–π ‚úã', { parse_mode: 'Markdown' });
        return;
    }

    activeGenerations.set(chatId, { type, startTime: Date.now() });
    console.log(`üü° –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ${type} –ø–æ—á–∞–ª–∞—Å—è –¥–ª—è —á–∞—Ç—É ${chatId}`);

    try {
        await generator(ctx);
    } catch (error) {
        console.error(`üî¥ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ${type}:`, error);
        await ctx.reply('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
    } finally {
        activeGenerations.delete(chatId);
        console.log(`‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ${type} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —á–∞—Ç—É ${chatId}`);
    }
}

// –•–µ–ª–ø–µ—Ä –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ markdown —Å–∏–º–≤–æ–ª—ñ–≤
function cleanPostText(text) {
    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ Markdown/HTML —Å–∏–º–≤–æ–ª–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥—É
    return text.replace(/[*_`<>]/g, '').replace(/\n{3,}/g, '\n\n').trim();
}

// --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

bot.start(async ctx => {
    const keyboard = Markup.keyboard([
        ['üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥'],
        ['üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'],
        ['üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É'],
        ['üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É']
    ]).resize();

    await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', keyboard);
});

bot.hears('üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', async ctx => {
    await protectedGeneration(ctx, 'blog', async () => {
        await ctx.reply('üåÄ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —ñ–¥–µ—é –¥–ª—è –±–ª–æ–≥—É...');

        let blogIdea = '';
        let attempts = 0;

        while (attempts < 10) {
            const ideaPrompt = `
            –ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É, –∫—Ä–µ–∞—Ç–∏–≤–Ω—É —ñ–¥–µ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É –ø—Ä–æ:
            - —Ä–æ–±–æ—Ç—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞, –∂–∏—Ç—Ç—è —É —Å—Ñ–µ—Ä—ñ IT, –º–æ—Ç–∏–≤–∞—Ü—ñ—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, AI –∞–±–æ Node.js.
            –§–æ—Ä–º–∞—Ç:
            - –ª–∏—à–µ 1 —ñ–¥–µ—è (–∂–æ–¥–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤)
            - –¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤
            - –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ
            - –Ω–µ –¥–æ–¥–∞–≤–∞–π –ª–∞–ø–∫–∏
            `;
            const ideaResult = await model.generateContent(ideaPrompt);
            const idea = ideaResult.response.text().trim();

            if (!isDuplicateIdea(idea)) {
                blogIdea = idea;
                saveUsedTopic(idea);
                break;
            }
            attempts++;
        }

        if (!blogIdea) {
            await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤—É —Ç–µ–º—É, —É—Å—ñ —ñ–¥–µ—ó –≤–∂–µ –±—É–ª–∏ üòÖ');
            return;
        }

        await ctx.reply(`‚ú® <b>–Ü–¥–µ—è –¥–ª—è –±–ª–æ–≥—É:</b>\n\n${blogIdea}`, { parse_mode: 'HTML' });
        await ctx.reply('‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –±–ª–æ–≥-–ø–æ—Å—Ç...');

        const postPrompt = `
        –°—Ç–≤–æ—Ä–∏ –≤–µ–ª–∏–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (1500‚Äì2200 —Å–∏–º–≤–æ–ª—ñ–≤)
        —É —Å—Ç–∏–ª—ñ —Å—É—á–∞—Å–Ω–æ–≥–æ IT-–±–ª–æ–≥—É.
        –¢–µ–º–∞: "${blogIdea}"
        `;

        const postResult = await model.generateContent(postPrompt);
        const styledPost = cleanPostText(postResult.response.text());
        await ctx.reply(styledPost);
    });
});

bot.hears('üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', async ctx => {
    await protectedGeneration(ctx, 'quiz', async () => {
        await ctx.reply('üîÑ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–≤—ñ–∫—Ç–æ—Ä–∏–Ω—É...');

        let question = '';
        let options = [];
        let correct = 0;
        let explanation = '';
        let attempts = 0;

        while (attempts < 10) {
            const quizPrompt = `
            –°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (HTML, CSS, JavaScript –∞–±–æ Vue.js).
            –§–æ—Ä–º–∞—Ç:
            QUESTION: ...
            OPTIONS:
            1) ...
            2) ...
            3) ...
            4) ...
            CORRECT: X
            EXPLANATION: ...
            `;

            const quizResult = await model.generateContent(quizPrompt);
            const text = quizResult.response.text();

            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –∑ –ø—Ä–∞–ø–æ—Ä–æ–º 's' (dotall) –¥–ª—è –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤
            const questionMatch = text.match(/^QUESTION:\s*(.+?)\n/ms);
            const optionsMatch = text.match(/OPTIONS:([\s\S]*?)\nCORRECT:/ms);
            const correctMatch = text.match(/CORRECT:\s*(\d)/i);
            const explanationMatch = text.match(/EXPLANATION:\s*(.+)/is);

            if (!questionMatch || !optionsMatch || !correctMatch) {
                attempts++;
                continue;
            }

            const q = questionMatch[1].trim();
            if (isDuplicateIdea(q)) {
                attempts++;
                continue;
            }

            question = q;
            saveUsedTopic(q);
            options = optionsMatch[1]
                .trim()
                .split(/\d\)\s*/)
                .filter(Boolean)
                .map(o => o.trim().slice(0, 70));

            correct = Number(correctMatch[1]) - 1;
            explanation = explanationMatch ? explanationMatch[1].trim().slice(0, 200) : '';
            break;
        }

        if (!question) {
            await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üòÖ');
            return;
        }

        await ctx.telegram.sendPoll(ctx.chat.id, question, options, {
            type: 'quiz',
            correct_option_id: correct,
            explanation: explanation || '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ—Å—Ç—ñ!',
            is_anonymous: true
        });

        const postPrompt = `
        –°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç (700‚Äì1200 —Å–∏–º–≤–æ–ª—ñ–≤)
        –¥–ª—è —Ç–µ–º–∏ "${question}" —É —Å—Ç–∏–ª—ñ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
        `;
        const postResult = await model.generateContent(postPrompt);
        const styledPost = cleanPostText(postResult.response.text());
        await ctx.telegram.sendMessage(ctx.chat.id, styledPost);
    });
});

bot.hears('üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', async ctx => {
    await protectedGeneration(ctx, 'quote', async () => {
        await ctx.reply('üòé –ì–µ–Ω–µ—Ä—É—é –Ω–∞—Å—Ç—Ä—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞...');

        const quotePrompt = `
        –ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É –¥–æ—Ç–µ–ø–Ω—É —Ü–∏—Ç–∞—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤)
        –ø—Ä–æ –∂–∏—Ç—Ç—è –∞–±–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.
        –ë–µ–∑ –ª–∞–ø–æ–∫, –ª–∏—à–µ —Ç–µ–∫—Å—Ç —É —Å—Ç–∏–ª—ñ Telegram, –∑ –µ–º–æ–¥–∑—ñ.
        `;

        let attempts = 0;
        while (attempts < 10) {
            const quoteResult = await model.generateContent(quotePrompt);
            let quote = quoteResult.response.text().trim();
            quote = cleanPostText(quote).replace(/\n{2,}/g, '\n');

            if (!isDuplicateIdea(quote)) {
                saveUsedTopic(quote);
                await ctx.reply(`üí¨ <b>–¶–∏—Ç–∞—Ç–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞:</b>\n\n${quote}`, { parse_mode: 'HTML' });
                return;
            }
            attempts++;
        }

        await ctx.reply('‚ö†Ô∏è –£—Å—ñ —Ü–∏—Ç–∞—Ç–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å üòÖ');
    });
});

bot.hears('üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É', async ctx => {
    await protectedGeneration(ctx, 'task', async () => {
        await ctx.reply('‚öôÔ∏è –ì–µ–Ω–µ—Ä—É—é —Ü—ñ–∫–∞–≤—É JS-–∑–∞–¥–∞—á—É...');

        const taskPrompt = `
        –°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –ø—Ä–∞–∫—Ç–∏—á–Ω—É –∑–∞–¥–∞—á—É –∑ JavaScript —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
        –§–æ—Ä–º–∞—Ç:
        üß© –ó–∞–¥–∞—á–∞ (–º–∞—Å–∏–≤–∏, –ª–æ–≥—ñ–∫–∞, –¥–∞—Ç–∏): ...
        üì¶ –ü—Ä–∏–∫–ª–∞–¥:
        \`\`\`js
        const arr = [...]
        // –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É
        \`\`\`
        üîç –£—Ç–æ—á–Ω–µ–Ω–Ω—è: ...
        –ú–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –∑–∞–¥–∞—á–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤, –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.
        `;

        let attempts = 0;
        while (attempts < 10) {
            const result = await model.generateContent(taskPrompt);
            const task = cleanPostText(result.response.text());

            if (!isDuplicateIdea(task)) {
                saveUsedTopic(task);
                await ctx.reply(task);
                return;
            }
            attempts++;
        }

        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∑–∞–¥–∞—á—É üòÖ');
    });
});

// –¢–∞–π–º–∞—É—Ç –¥–ª—è "–∑–∞—Å—Ç—Ä—è–≥–ª–∏—Ö" –≥–µ–Ω–µ—Ä–∞—Ü—ñ–π
setInterval(() => {
    const now = Date.now();
    const timeout = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω

    for (const [chatId, data] of activeGenerations.entries()) {
        if (now - data.startTime > timeout) {
            console.log(`‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—Å—Ç—Ä—è–≥–ª–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —á–∞—Ç—É ${chatId}`);
            activeGenerations.delete(chatId);
        }
    }
}, 60000); // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º –∞–Ω—Ç–∏—Ü–∏–∫–ª-–∑–∞—Ö–∏—Å—Ç–æ–º!');