import dotenv from 'dotenv';
import fs from 'fs';
import { Telegraf, Markup } from 'telegraf';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash', generationConfig: {temperature: 0.9} });

const USED_TOPICS_FILE = './used_topics.json';
let usedTopics = [];

if (fs.existsSync(USED_TOPICS_FILE)) {
    try {
        usedTopics = JSON.parse(fs.readFileSync(USED_TOPICS_FILE, 'utf-8'));
    } catch {
        usedTopics = [];
    }
}

function getText(result) {
    return (
        result?.response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
        result?.response?.text?.trim() ||
        ''
    );
}

function similarityRatio(a, b) {
    a = a.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    b = b.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    if (!a.length || !b.length) return 0;
    let same = 0;
    for (let i = 0; i < Math.min(a.length, b.length); i++) {
        if (a[i] === b[i]) same++;
    }
    return same / Math.max(a.length, b.length);
}

function isDuplicateIdea(newText) {
    return usedTopics.some(oldText => similarityRatio(oldText, newText) > 0.8);
}

function saveUsedTopic(topic) {
    usedTopics.push(topic);
    if (usedTopics.length > 500) {
        usedTopics = usedTopics.slice(-500);
    }
    fs.writeFileSync(USED_TOPICS_FILE, JSON.stringify(usedTopics, null, 2));
}

const activeGenerations = new Map();

function protectedGeneration(ctx, type, generator) {
    const chatId = ctx.chat.id;
    const messageId = ctx.message?.message_id;

    if (activeGenerations.has(chatId)) {
        ctx.reply('‚è≥ **–£–í–ê–ì–ê!** –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—á–µ–∫–∞–π ‚úã', { parse_mode: 'Markdown' });
        return;
    }

    activeGenerations.set(chatId, { type, messageId, startTime: Date.now() });

    (async () => {
        try {
            await generator(ctx);
        } catch (error) {
            console.error('‚ùå Generation error:', error);
            ctx.reply('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        } finally {
            activeGenerations.delete(chatId);
        }
    })();
}

function cleanPostText(text) {
    return text.replace(/[*_`<>]/g, '').replace(/\n{3,}/g, '\n\n').trim();
}

bot.start(async ctx => {
    const keyboard = Markup.keyboard([
        ['üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥'],
        ['üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'],
        ['üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É'],
        ['üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É']
    ]).resize();

    await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', keyboard);
});

// üß† –±–ª–æ–≥
bot.hears('üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', ctx => {
    protectedGeneration(ctx, 'blog', async (ctx) => {
        await ctx.reply('üåÄ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —ñ–¥–µ—é –¥–ª—è –±–ª–æ–≥—É...');

        let blogIdea = '';
        for (let i = 0; i < 10; i++) {
            const ideaPrompt = `
      –ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É, –∫—Ä–µ–∞—Ç–∏–≤–Ω—É —ñ–¥–µ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É –ø—Ä–æ:
      - —Ä–æ–±–æ—Ç—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞, –∂–∏—Ç—Ç—è —É —Å—Ñ–µ—Ä—ñ IT, –º–æ—Ç–∏–≤–∞—Ü—ñ—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, AI –∞–±–æ Node.js.
      –§–æ—Ä–º–∞—Ç:
      - –ª–∏—à–µ 1 —ñ–¥–µ—è (–∂–æ–¥–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤)
      - –¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤
      - –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ
      - –Ω–µ –¥–æ–¥–∞–≤–∞–π –ª–∞–ø–∫–∏
      `;
            const res = await model.generateContent([ideaPrompt]);
            const idea = getText(res);
            if (idea && !isDuplicateIdea(idea)) {
                blogIdea = idea;
                saveUsedTopic(idea);
                break;
            }
        }

        if (!blogIdea) {
            await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤—É —Ç–µ–º—É üòÖ');
            return;
        }

        await ctx.reply(`‚ú® <b>–Ü–¥–µ—è –¥–ª—è –±–ª–æ–≥—É:</b>\n\n${blogIdea}`, { parse_mode: 'HTML' });
        await ctx.reply('‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –±–ª–æ–≥-–ø–æ—Å—Ç...');

        const postPrompt = `
    –°—Ç–≤–æ—Ä–∏ –≤–µ–ª–∏–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (1500‚Äì2200 —Å–∏–º–≤–æ–ª—ñ–≤)
    —É —Å—Ç–∏–ª—ñ —Å—É—á–∞—Å–Ω–æ–≥–æ IT-–±–ª–æ–≥—É.
    –¢–µ–º–∞: "${blogIdea}"
    `;
        const postRes = await model.generateContent([postPrompt]);
        const postText = getText(postRes);
        if (!postText) {
            await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ üòî');
            return;
        }
        const styledPost = cleanPostText(postText);
        await ctx.reply(styledPost);
    });
});

bot.hears('üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', ctx => {
    protectedGeneration(ctx, 'quiz', async (ctx) => {
        await ctx.reply('üîÑ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–≤—ñ–∫—Ç–æ—Ä–∏–Ω—É...');

        let question = '';
        let options = [];
        let correct = 0;
        let explanation = '';
        let attempts = 0;

        while (!question && attempts < 10) {
            attempts++;
            const prompt = `
      –°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (HTML, CSS, JavaScript –∞–±–æ Vue.js).(–Ω–µ –±—ñ–ª—å—à–µ 300 —Å–∏–º–≤–æ–ª—ñ–≤)
      –§–æ—Ä–º–∞—Ç:
      QUESTION: ...
      OPTIONS:
      1) ...
      2) ...
      3) ...
      4) ...
      CORRECT: X
      EXPLANATION: ...
      `;
            const res = await model.generateContent([prompt]);
            const text = getText(res);

            const qMatch = text.match(/^QUESTION:\s*(.+?)\n/ms);
            if (!qMatch) continue;

            const qCandidate = qMatch[1]?.trim();
            if (!qCandidate || isDuplicateIdea(qCandidate)) continue;

            const optionsBlock = text.match(/OPTIONS:([\s\S]*?)\nCORRECT:/ms)?.[1] || '';
            const optionsCandidate = optionsBlock.split(/\d\)\s*/).filter(Boolean).map(o => o.trim().slice(0, 70)).filter(o => o.length > 0);

            if (optionsCandidate.length < 4) continue;

            const correctCandidate = Number(text.match(/CORRECT:\s*(\d)/)?.[1]) - 1;
            if (correctCandidate < 0 || correctCandidate >= optionsCandidate.length) continue;

            question = qCandidate;
            options = optionsCandidate;
            correct = correctCandidate;
            explanation = text.match(/EXPLANATION:\s*(.+)/is)?.[1]?.trim()?.slice(0, 200) || '';

            saveUsedTopic(question);
            break;
        }

        if (!question) {
            await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üòÖ');
            return;
        }

        const finalExplanation = explanation || '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ—Å—Ç—ñ!';

        await ctx.telegram.sendPoll(ctx.chat.id, question, options, {
            type: 'quiz',
            correct_option_id: correct,
            explanation: finalExplanation,
            is_anonymous: true
        });

        const postPrompt = `
    –°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç (700‚Äì1200 —Å–∏–º–≤–æ–ª—ñ–≤)
    –¥–ª—è —Ç–µ–º–∏ "${question}" —É —Å—Ç–∏–ª—ñ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.
    `;
        const postRes = await model.generateContent([postPrompt]);
        const postText = getText(postRes);
        if (postText) await ctx.telegram.sendMessage(ctx.chat.id, cleanPostText(postText));
    });
});

bot.hears('üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', ctx => {
    protectedGeneration(ctx, 'quote', async (ctx) => {
        await ctx.reply('üòé –ì–µ–Ω–µ—Ä—É—é –Ω–∞—Å—Ç—Ä—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞...');

        const prompt = `
    –ü—Ä–∏–¥—É–º–∞–π 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–æ—Ç–µ–ø–Ω–∏—Ö —Ü–∏—Ç–∞—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤)
    –ø—Ä–æ –∂–∏—Ç—Ç—è –∞–±–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —Ç–∞ —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞ —Å–µ–Ω—Å–æ–º.
    –ë–µ–∑ –ª–∞–ø–æ–∫, –ª–∏—à–µ —Ç–µ–∫—Å—Ç —É —Å—Ç–∏–ª—ñ Telegram, –∑ –µ–º–æ–¥–∑—ñ.
    `;
        for (let i = 0; i < 10; i++) {
            const res = await model.generateContent([prompt]);
            const quote = cleanPostText(getText(res));
            if (quote && !isDuplicateIdea(quote)) {
                saveUsedTopic(quote);
                await ctx.reply(`üí¨ <b>–¶–∏—Ç–∞—Ç–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞:</b>\n\n${quote}`, { parse_mode: 'HTML' });
                return;
            }
        }
        await ctx.reply('‚ö†Ô∏è –£—Å—ñ —Ü–∏—Ç–∞—Ç–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å üòÖ');
    });
});

bot.hears('üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É', ctx => {
    protectedGeneration(ctx, 'task', async (ctx) => {
        await ctx.reply('‚öôÔ∏è –ì–µ–Ω–µ—Ä—É—é —Ü—ñ–∫–∞–≤—É JS-–∑–∞–¥–∞—á—É...');

        const prompt = `
    –°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –ø—Ä–∞–∫—Ç–∏—á–Ω—É –∑–∞–¥–∞—á—É –∑ JavaScript —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
    –§–æ—Ä–º–∞—Ç:
    üß© –ó–∞–¥–∞—á–∞ (–º–∞—Å–∏–≤–∏, –ª–æ–≥—ñ–∫–∞, –¥–∞—Ç–∏): ...
    üì¶ –ü—Ä–∏–∫–ª–∞–¥:
    \`\`\`js
    const arr = [...]
    // –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É
    \`\`\`
    üîç –£—Ç–æ—á–Ω–µ–Ω–Ω—è: ...
    –ú–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –∑–∞–¥–∞—á–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤, –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.
    `;
        for (let i = 0; i < 10; i++) {
            const res = await model.generateContent([prompt]);
            const task = cleanPostText(getText(res));
            if (task && !isDuplicateIdea(task)) {
                saveUsedTopic(task);
                await ctx.reply(task);
                return;
            }
        }
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—É –∑–∞–¥–∞—á—É üòÖ');
    });
});

setInterval(() => {
    const now = Date.now();
    for (const [chatId, data] of activeGenerations.entries()) {
        if (now - data.startTime > 5 * 60 * 1000) activeGenerations.delete(chatId);
    }
}, 60000);

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!');
