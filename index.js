import dotenv from 'dotenv';
import fs from 'fs';
import { Telegraf, Markup } from 'telegraf';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash', generationConfig: {temperature: 0.9} });

const USED_TOPICS_FILE = './used_topics.json';
let usedTopics = [];

if (fs.existsSync(USED_TOPICS_FILE)) {
    try {
        usedTopics = JSON.parse(fs.readFileSync(USED_TOPICS_FILE, 'utf-8'));
    } catch {
        usedTopics = [];
    }
}

function getText(result) {
    return (
        result?.response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
        result?.response?.text?.trim() ||
        ''
    );
}

function similarityRatio(a, b) {
    a = a.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    b = b.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    if (!a.length || !b.length) return 0;
    let same = 0;
    for (let i = 0; i < Math.min(a.length, b.length); i++) {
        if (a[i] === b[i]) same++;
    }
    return same / Math.max(a.length, b.length);
}

function isDuplicateIdea(newText) {
    return usedTopics.some(oldText => similarityRatio(oldText, newText) > 0.8);
}

function saveUsedTopic(topic) {
    usedTopics.push(topic);
    if (usedTopics.length > 500) {
        usedTopics = usedTopics.slice(-500);
    }
    fs.writeFileSync(USED_TOPICS_FILE, JSON.stringify(usedTopics, null, 2));
}

const activeGenerations = new Map();
const userBlogTopics = new Map();
const userTaskTopics = new Map();
const userQuizTopics = new Map();
const userCurrentMode = new Map();

function protectedGeneration(ctx, type, generator) {
    const chatId = ctx.chat.id;
    const messageId = ctx.message?.message_id;

    if (activeGenerations.has(chatId)) {
        ctx.reply('‚è≥ **–£–í–ê–ì–ê!** –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—á–µ–∫–∞–π ‚úã', { parse_mode: 'Markdown' });
        return;
    }

    activeGenerations.set(chatId, { type, messageId, startTime: Date.now() });

    (async () => {
        try {
            await generator(ctx);
        } catch (error) {
            console.error('‚ùå Generation error:', error);
            ctx.reply('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        } finally {
            activeGenerations.delete(chatId);
        }
    })();
}

function cleanPostText(text) {
    return text.replace(/[*_`<>]/g, '').replace(/\n{3,}/g, '\n\n').trim();
}

function getMainMenuKeyboard() {
    return Markup.keyboard([
        ['üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥'],
        ['üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'],
        ['üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É'],
        ['üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É']
    ]).resize();
}

function getTopicsKeyboard(topics, regenerateText = 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏') {
    const buttons = topics.map(topic => [topic]);
    buttons.push([regenerateText]);
    buttons.push(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']);
    return Markup.keyboard(buttons).resize();
}

bot.start(async ctx => {
    const chatId = ctx.chat.id;
    userCurrentMode.delete(chatId);
    await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', getMainMenuKeyboard());
});

async function generateBlogTopics(ctx, numTopics = 5) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üåÄ –ì–µ–Ω–µ—Ä—É—é ${numTopics} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–¥–µ–π –¥–ª—è –±–ª–æ–≥—É...`);

    const newTopics = [];
    const maxRounds = 3;

    for (let round = 0; round < maxRounds && newTopics.length < numTopics; round++) {
        const needed = numTopics - newTopics.length;
        const toGenerate = Math.min(needed * 2, 10);

        const promises = Array.from({ length: toGenerate }, () => {
            const ideaPrompt = `
–ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É, –∫—Ä–µ–∞—Ç–∏–≤–Ω—É —ñ–¥–µ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É –ø—Ä–æ:
- —Ä–æ–±–æ—Ç—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞, –∂–∏—Ç—Ç—è —É —Å—Ñ–µ—Ä—ñ IT, VUE, JS, –≤–µ—Ä—Å—Ç–∫—É, TS, –º–æ—Ç–∏–≤–∞—Ü—ñ—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, AI –∞–±–æ Node.js.
–§–æ—Ä–º–∞—Ç:
- –ª–∏—à–µ 1 —ñ–¥–µ—è (–∂–æ–¥–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤)
- –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤
- –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ
- –Ω–µ –¥–æ–¥–∞–≤–∞–π –ª–∞–ø–∫–∏
            `;
            return model.generateContent([ideaPrompt])
                .then(res => getText(res))
                .catch(() => null);
        });

        const results = await Promise.all(promises);

        for (const idea of results) {
            if (idea &&
                !isDuplicateIdea(idea) &&
                !newTopics.includes(idea) &&
                newTopics.length < numTopics) {
                newTopics.push(idea);
            }
        }

        if (newTopics.length >= numTopics) break;
    }

    if (newTopics.length === 0) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏—Ö —Ç–µ–º üòÖ', getMainMenuKeyboard());
        return;
    }

    userBlogTopics.set(chatId, newTopics);
    userCurrentMode.set(chatId, 'blog');

    await ctx.reply('–û–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –±–ª–æ–≥—É:', getTopicsKeyboard(newTopics, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏'));
}

bot.hears('üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', ctx => {
    protectedGeneration(ctx, 'blog_topics', generateBlogTopics);
});

bot.hears('üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏', ctx => {
    const chatId = ctx.chat.id;
    const mode = userCurrentMode.get(chatId);

    if (mode === 'blog') {
        protectedGeneration(ctx, 'blog_topics', generateBlogTopics);
    }
});

async function generateTaskTopics(ctx, numTopics = 5) {
    const chatId = ctx.chat.id;
    await ctx.reply(`‚öôÔ∏è –ì–µ–Ω–µ—Ä—É—é ${numTopics} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö JS-–∑–∞–¥–∞—á...`);

    const newTopics = [];
    const maxRounds = 3;

    for (let round = 0; round < maxRounds && newTopics.length < numTopics; round++) {
        const needed = numTopics - newTopics.length;
        const toGenerate = Math.min(needed * 2, 10);

        const promises = Array.from({ length: toGenerate }, () => {
            const ideaPrompt = `
–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫) –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–Ω–æ—ó –∑–∞–¥–∞—á—ñ –∑ JavaScript (–º–∞—Å–∏–≤–∏, –ª–æ–≥—ñ–∫–∞, –¥–∞—Ç–∏).
–§–æ—Ä–º–∞—Ç:
- –ª–∏—à–µ 1 –Ω–∞–∑–≤–∞
- –º–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—é
            `;
            return model.generateContent([ideaPrompt])
                .then(res => getText(res))
                .catch(() => null);
        });

        const results = await Promise.all(promises);

        for (const idea of results) {
            if (idea &&
                !isDuplicateIdea(idea) &&
                !newTopics.includes(idea) &&
                newTopics.length < numTopics) {
                newTopics.push(idea);
            }
        }

        if (newTopics.length >= numTopics) break;
    }

    if (newTopics.length === 0) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á üòÖ', getMainMenuKeyboard());
        return;
    }

    userTaskTopics.set(chatId, newTopics);
    userCurrentMode.set(chatId, 'task');

    await ctx.reply('–û–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:', getTopicsKeyboard(newTopics, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ'));
}

bot.hears('üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É', ctx => {
    protectedGeneration(ctx, 'task_topics', generateTaskTopics);
});

bot.hears('üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ', ctx => {
    const chatId = ctx.chat.id;
    const mode = userCurrentMode.get(chatId);

    if (mode === 'task') {
        protectedGeneration(ctx, 'task_topics', generateTaskTopics);
    }
});

async function generateQuizTopics(ctx, numTopics = 5) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üîÑ –ì–µ–Ω–µ—Ä—É—é ${numTopics} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–º –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω...`);

    const newTopics = [];
    const maxRounds = 3;

    for (let round = 0; round < maxRounds && newTopics.length < numTopics; round++) {
        const needed = numTopics - newTopics.length;
        const toGenerate = Math.min(needed * 2, 10);

        const promises = Array.from({ length: toGenerate }, () => {
            const ideaPrompt = `
–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–∑–≤—É (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫) –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (HTML, CSS, JavaScript –∞–±–æ Vue.js).
–§–æ—Ä–º–∞—Ç:
- –ª–∏—à–µ 1 –Ω–∞–∑–≤–∞
- –º–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—é
            `;
            return model.generateContent([ideaPrompt])
                .then(res => getText(res))
                .catch(() => null);
        });

        const results = await Promise.all(promises);

        for (const idea of results) {
            if (idea && newTopics.length < numTopics) {
                newTopics.push(idea);
            }
        }

        if (newTopics.length >= numTopics) break;
    }

    if (newTopics.length < numTopics) {
        let placeholders = [
            '‚ùì JavaScript –ó–∞–º–∏–∫–∞–Ω–Ω—è',
            '‚ùì CSS Grid vs Flexbox',
            '‚ùì –ü—Ä–æ–º—ñ—Å–∏ —Ç–∞ Async/Await',
            '‚ùì –©–æ —Ç–∞–∫–µ Virtual DOM',
            '‚ùì –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤ JS'
        ];

        while (newTopics.length < numTopics && placeholders.length > 0) {
            newTopics.push(placeholders.shift());
        }
    }

    userQuizTopics.set(chatId, newTopics);
    userCurrentMode.set(chatId, 'quiz');

    await ctx.reply('–û–±–µ—Ä–∏ —Ç–µ–º—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:', getTopicsKeyboard(newTopics, 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏'));
}

bot.hears('üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', ctx => {
    protectedGeneration(ctx, 'quiz_topics', generateQuizTopics);
});

bot.hears('üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏', ctx => {
    const chatId = ctx.chat.id;
    const mode = userCurrentMode.get(chatId);

    if (mode === 'quiz') {
        protectedGeneration(ctx, 'quiz_topics', generateQuizTopics);
    }
});

bot.on('text', async ctx => {
    const chatId = ctx.chat.id;
    const text = ctx.message.text;
    const mode = userCurrentMode.get(chatId);

    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
        userCurrentMode.delete(chatId);
        await ctx.reply('–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', getMainMenuKeyboard());
        return;
    }

    if (mode === 'blog') {
        const topics = userBlogTopics.get(chatId);
        if (topics && topics.includes(text)) {
            userCurrentMode.delete(chatId);

            protectedGeneration(ctx, 'blog_post', async (ctx) => {
                await ctx.reply(`‚ú® **–Ü–¥–µ—è –¥–ª—è –±–ª–æ–≥—É:**\n\n${text}`, { parse_mode: 'Markdown' });
                await ctx.reply('‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –±–ª–æ–≥-–ø–æ—Å—Ç...');

                saveUsedTopic(text);
                userBlogTopics.delete(chatId);

                const postPrompt = `
–°—Ç–≤–æ—Ä–∏ –≤–µ–ª–∏–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (1500 —Å–∏–º–≤–æ–ª—ñ–≤)
—É —Å—Ç–∏–ª—ñ —Å—É—á–∞—Å–Ω–æ–≥–æ IT-–±–ª–æ–≥—É.
–¢–µ–º–∞: "${text}"
                `;
                const postRes = await model.generateContent([postPrompt]);
                const postText = getText(postRes);

                if (!postText) {
                    await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ üòî', getMainMenuKeyboard());
                    return;
                }

                const styledPost = cleanPostText(postText);
                await ctx.reply(styledPost, getMainMenuKeyboard());
            });
            return;
        }
    }

    if (mode === 'task') {
        const topics = userTaskTopics.get(chatId);
        if (topics && topics.includes(text)) {
            userCurrentMode.delete(chatId);

            protectedGeneration(ctx, 'task_post', async (ctx) => {
                await ctx.reply(`üéØ **–í–∏–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞:** ${text}`, { parse_mode: 'Markdown' });
                await ctx.reply('üîß –ì–µ–Ω–µ—Ä—É—é –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ...');

                saveUsedTopic(text);
                userTaskTopics.delete(chatId);

                const taskPrompt = `
–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –ø—Ä–∞–∫—Ç–∏—á–Ω—É –∑–∞–¥–∞—á—É –∑ JavaScript —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
–¢–µ–º–∞: "${text}"
–§–æ—Ä–º–∞—Ç:
üß© –ó–∞–¥–∞—á–∞: ... (–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å)
üì¶ –ü—Ä–∏–∫–ª–∞–¥:
\`\`\`js
// –ø—Ä–∏–∫–ª–∞–¥ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö
// –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É
\`\`\`
üîç –£—Ç–æ—á–Ω–µ–Ω–Ω—è: ... (–¥–æ–¥–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏)
–ú–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –∑–∞–¥–∞—á–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤, –¥–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.
                `;
                const taskRes = await model.generateContent([taskPrompt]);
                const taskText = getText(taskRes);

                if (!taskText) {
                    await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ üòî', getMainMenuKeyboard());
                    return;
                }

                const styledTask = cleanPostText(taskText);
                await ctx.reply(styledTask, getMainMenuKeyboard());
            });
            return;
        }
    }

    if (mode === 'quiz') {
        const topics = userQuizTopics.get(chatId);
        if (topics && topics.includes(text)) {
            userCurrentMode.delete(chatId);

            protectedGeneration(ctx, 'quiz_post', async (ctx) => {
                await ctx.reply(`üéØ **–í–∏–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:** ${text}`, { parse_mode: 'Markdown' });
                await ctx.reply('üìù –ì–µ–Ω–µ—Ä—É—é –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—Å—Ç...');

                saveUsedTopic(text);
                userQuizTopics.delete(chatId);

                let question = '';
                let options = [];
                let correct = 0;
                let explanation = '';
                let attempts = 0;

                while (!question && attempts < 5) {
                    attempts++;
                    const prompt = `
–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –Ω–∞ —Ç–µ–º—É "${text}".(–Ω–µ –±—ñ–ª—å—à–µ 300 —Å–∏–º–≤–æ–ª—ñ–≤)
–§–æ—Ä–º–∞—Ç:
QUESTION: ...
OPTIONS:
1) ...
2) ...
3) ...
4) ...
CORRECT: X
EXPLANATION: ...
                    `;
                    const res = await model.generateContent([prompt]);
                    const responseText = getText(res);

                    const qMatch = responseText.match(/^QUESTION:\s*(.+?)\n/ms);
                    if (!qMatch) continue;

                    const qCandidate = qMatch[1]?.trim();
                    if (!qCandidate) continue;

                    const optionsBlock = responseText.match(/OPTIONS:([\s\S]*?)\nCORRECT:/ms)?.[1] || '';
                    const optionsCandidate = optionsBlock.split(/\d\)\s*/).filter(Boolean).map(o => o.trim().slice(0, 70)).filter(o => o.length > 0);

                    if (optionsCandidate.length < 4) continue;

                    const correctCandidate = Number(responseText.match(/CORRECT:\s*(\d)/)?.[1]) - 1;
                    if (correctCandidate < 0 || correctCandidate >= optionsCandidate.length) continue;

                    question = qCandidate;
                    options = optionsCandidate;
                    correct = correctCandidate;
                    explanation = responseText.match(/EXPLANATION:\s*(.+)/is)?.[1]?.trim()?.slice(0, 200) || '';

                    break;
                }

                if (!question) {
                    await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ üòî', getMainMenuKeyboard());
                    return;
                }

                const finalExplanation = explanation || '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ—Å—Ç—ñ!';

                await ctx.telegram.sendPoll(ctx.chat.id, question, options, {
                    type: 'quiz',
                    correct_option_id: correct,
                    explanation: finalExplanation,
                    is_anonymous: true
                });

                const postPrompt = `
–°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç (700‚Äì1200 —Å–∏–º–≤–æ–ª—ñ–≤)
–¥–ª—è —Ç–µ–º–∏ "${question}" —É —Å—Ç–∏–ª—ñ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞, —â–æ–± –ø–æ—è—Å–Ω–∏—Ç–∏ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—é, –ø—Ä–æ —è–∫—É –±—É–ª–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.
                `;
                const postRes = await model.generateContent([postPrompt]);
                const postText = getText(postRes);

                if (postText) {
                    await ctx.telegram.sendMessage(ctx.chat.id, cleanPostText(postText), getMainMenuKeyboard());
                } else {
                    await ctx.reply('‚úÖ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!', getMainMenuKeyboard());
                }
            });
            return;
        }
    }
});

bot.hears('üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', ctx => {
    protectedGeneration(ctx, 'quote', async (ctx) => {
        await ctx.reply('üòé –ì–µ–Ω–µ—Ä—É—é –Ω–∞—Å—Ç—Ä—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞...');

        const prompt = `
–ü—Ä–∏–¥—É–º–∞–π 10 –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–æ—Ç–µ–ø–Ω–∏—Ö —Ü–∏—Ç–∞—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤)
–ø—Ä–æ –∂–∏—Ç—Ç—è –∞–±–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ —Ç–∞ —Ä—ñ–∑–Ω–∏–º–∏ –∑–∞ —Å–µ–Ω—Å–æ–º.
–ë–µ–∑ –ª–∞–ø–æ–∫, –ª–∏—à–µ —Ç–µ–∫—Å—Ç —É —Å—Ç–∏–ª—ñ Telegram, –∑ –µ–º–æ–¥–∑—ñ.
        `;
        for (let i = 0; i < 10; i++) {
            const res = await model.generateContent([prompt]);
            const quote = cleanPostText(getText(res));
            if (quote && !isDuplicateIdea(quote)) {
                saveUsedTopic(quote);
                await ctx.reply(`üí¨ **–¶–∏—Ç–∞—Ç–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞:**\n\n${quote}`, { parse_mode: 'Markdown' });
                return;
            }
        }
        await ctx.reply('‚ö†Ô∏è –£—Å—ñ —Ü–∏—Ç–∞—Ç–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å üòÖ');
    });
});

setInterval(() => {
    const now = Date.now();
    for (const [chatId, data] of activeGenerations.entries()) {
        if (now - data.startTime > 5 * 60 * 1000) activeGenerations.delete(chatId);
    }
}, 60000);

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!');