import dotenv from 'dotenv';
import fs from 'fs';
import { Telegraf, Markup } from 'telegraf';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

const USED_TOPICS_FILE = './used_topics.json';
let usedTopics = [];

if (fs.existsSync(USED_TOPICS_FILE)) {
    try {
        usedTopics = JSON.parse(fs.readFileSync(USED_TOPICS_FILE, 'utf-8'));
    } catch {
        usedTopics = [];
    }
}

function saveUsedTopic(topic) {
    usedTopics.push(topic);
    fs.writeFileSync(USED_TOPICS_FILE, JSON.stringify(usedTopics, null, 2));
}

bot.start(async ctx => {
    const keyboard = Markup.keyboard([
        ['üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥'],
        ['üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'],
        ['üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É']
    ]).resize();

    await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', keyboard);
});

// === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –±–ª–æ–≥—É ===
bot.hears('üß† –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', async ctx => {
    await ctx.reply('üåÄ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —ñ–¥–µ—é –¥–ª—è –±–ª–æ–≥—É...');

    let blogIdea = '';
    let attempts = 0;

    while (attempts < 10) {
        const ideaPrompt = `
        –ü—Ä–∏–¥—É–º–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É, –∫—Ä–µ–∞—Ç–∏–≤–Ω—É —ñ–¥–µ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É –ø—Ä–æ:
        - —Ä–æ–±–æ—Ç—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞, –∂–∏—Ç—Ç—è —É —Å—Ñ–µ—Ä—ñ IT, –º–æ—Ç–∏–≤–∞—Ü—ñ—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, AI –∞–±–æ Node.js.
        –§–æ—Ä–º–∞—Ç:
        - –ª–∏—à–µ 1 —ñ–¥–µ—è (–∂–æ–¥–Ω–∏—Ö —Å–ø–∏—Å–∫—ñ–≤)
        - –¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤
        - –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ
        - –Ω–µ –¥–æ–¥–∞–≤–∞–π –ª–∞–ø–∫–∏, –Ω–µ –ø–∏—à–∏ —Å–ª–æ–≤–æ ‚Äú–Ü–¥–µ—è‚Äù
        `;

        const ideaResult = await model.generateContent(ideaPrompt);
        const idea = ideaResult.response.text().trim();

        if (!usedTopics.includes(idea)) {
            blogIdea = idea;
            saveUsedTopic(idea);
            break;
        }
        attempts++;
    }

    if (!blogIdea) {
        return ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤—É —Ç–µ–º—É, —É—Å—ñ —ñ–¥–µ—ó –≤–∂–µ –±—É–ª–∏ üòÖ');
    }

    await ctx.reply(`‚ú® <b>–Ü–¥–µ—è –¥–ª—è –±–ª–æ–≥—É:</b>\n\n${blogIdea}`, { parse_mode: 'HTML' });
    await ctx.reply('‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –±–ª–æ–≥-–ø–æ—Å—Ç...');

    const postPrompt = `
    –°—Ç–≤–æ—Ä–∏ –≤–µ–ª–∏–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–æ–±—Å—è–≥ 1500‚Äì2200 —Å–∏–º–≤–æ–ª—ñ–≤) —É —Å—Ç–∏–ª—ñ —Å—É—á–∞—Å–Ω–æ–≥–æ IT-–±–ª–æ–≥—É.
    –¢–µ–º–∞: "${blogIdea}"
    –§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏ —Å—Ö–æ–∂–∏–º –Ω–∞ —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ üëá
    üí° –ë–∞–≥ ‚Äî —Ç–æ –∫–≤–µ—Å—Ç. –†–æ–∑–≤‚Äô—è–∂–∏ —Ç–∞ –ø—Ä–æ–∫–∞—á–∞–π —Å–∫—ñ–ª!
    üêû –ó–Ω–∞–π—à–æ–≤ –±–∞–≥? –ù–µ –ø–∞–Ω—ñ–∫—É–π! –¶–µ –Ω–µ –∫—ñ–Ω–µ—Ü—å —Å–≤—ñ—Ç—É, –∞ –ø–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ –∫–≤–µ—Å—Ç—É.
    üïµÔ∏è‚Äç‚ôÇÔ∏è –£—è–≤–∏ —Å–µ–±–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–æ–º. –†–æ–∑—Å–ª—ñ–¥—É–π. –®—É–∫–∞–π –ø—ñ–¥–∫–∞–∑–∫–∏.
    üß∞ –†–æ–∑–±–∏–π –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏, –ø–µ—Ä–µ–≤—ñ—Ä –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç.
    üèÜ –í–∏—Ä—ñ—à–∏–≤ –±–∞–≥? –¢–∏ –ø—Ä–æ–∫–∞—á–∞–≤ —Å–≤—ñ–π —Å–∫—ñ–ª.
    üìã –í–∏–º–æ–≥–∏:
    - —Å—Ç–∏–ª—å Telegram-–±–ª–æ–≥—É: –∑ –µ–º–æ–¥–∑—ñ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ–≥–æ –∞–±–∑–∞—Ü—É;
    - 6‚Äì9 –∞–±–∑–∞—Ü—ñ–≤, –∫–æ–∂–µ–Ω –∑ —á—ñ—Ç–∫–∏–º –∑–º—ñ—Å—Ç–æ–º;
    - —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –±–µ–∑ –∞–Ω–≥–ª—ñ—Ü–∏–∑–º—ñ–≤;
    - –ø—Ä–∏—Ä–æ–¥–Ω–∞ –º–æ–≤–∞, –ª–µ–≥–∫–µ —á–∏—Ç–∞–Ω–Ω—è, —Ç—Ä–æ—Ö–∏ –º–æ—Ç–∏–≤–∞—Ü—ñ—ó –∞–±–æ –≥—É–º–æ—Ä—É;
    - —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∞–±–∑–∞—Ü ‚Äî –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫.
    –ó–≥–µ–Ω–µ—Ä—É–π –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π –ø–æ—Å—Ç —É —Ü—å–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–ª—è —Ç–µ–º–∏: "${blogIdea}"
    `;

    try {
        const postResult = await model.generateContent(postPrompt);
        let styledPost = postResult.response.text();
        styledPost = styledPost
            .replace(/[*_`<>]/g, '')
            .replace(/\n{3,}/g, '\n\n')
            .trim();
        await ctx.reply(styledPost, { parse_mode: undefined });
    } catch (err) {
        console.error(err);
        await ctx.reply('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –±–ª–æ–≥—É.');
    }
});

// === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏ ===
bot.hears('üß© –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', async ctx => {
    await ctx.reply('üîÑ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–≤—ñ–∫—Ç–æ—Ä–∏–Ω—É...');

    let question = '';
    let options = [];
    let correct = 0;
    let explanation = '';
    let attempts = 0;

    while (attempts < 10) {
        const quizPrompt = `
    –°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (HTML, CSS, JavaScript –∞–±–æ Vue.js) —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.
    –§–æ—Ä–º–∞—Ç:
    QUESTION: –∫–æ—Ä–æ—Ç–∫–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–¥–æ 250 —Å–∏–º–≤–æ–ª—ñ–≤)
    OPTIONS:
    1) –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤)
    2) –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤)
    3) –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤)
    4) –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (–¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤)
    CORRECT: X (–Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ)
    EXPLANATION: –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤).
    –ë–µ–∑ Markdown —á–∏ HTML.
    `;

        const quizResult = await model.generateContent(quizPrompt);
        const text = quizResult.response.text();
        const questionMatch = text.match(/QUESTION:\s*(.+)/i);
        const optionsMatch = text.match(/OPTIONS:[\s\S]*?(?=CORRECT:)/i);
        const correctMatch = text.match(/CORRECT:\s*(\d)/i);
        const explanationMatch = text.match(/EXPLANATION:\s*(.+)/i);

        if (!questionMatch || !optionsMatch || !correctMatch) {
            attempts++;
            continue;
        }

        const q = questionMatch[1].trim();
        if (usedTopics.includes(q)) {
            attempts++;
            continue;
        }

        question = q;
        saveUsedTopic(question);

        options = optionsMatch[0]
            .replace('OPTIONS:', '')
            .trim()
            .split(/\d\)\s*/)
            .filter(Boolean)
            .map(o => o.trim().slice(0, 70));

        correct = Number(correctMatch[1]) - 1;
        explanation = explanationMatch ? explanationMatch[1].trim().slice(0, 200) : '';
        break;
    }

    if (!question) {
        return ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤—Å—ñ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å üòÖ');
    }

    const targetChatId = ctx.chat.id;

    try {
        await ctx.telegram.sendPoll(targetChatId, question, options, {
            type: 'quiz',
            correct_option_id: correct,
            explanation,
            is_anonymous: true
        });

        const postPrompt = `
    –°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç (700‚Äì1200 —Å–∏–º–≤–æ–ª—ñ–≤) —É —Ñ–æ—Ä–º–∞—Ç—ñ –ø—Ä–∏–∫–ª–∞–¥—É:
    ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ñ–∑ —Ç–µ–º–æ—é ‚Äî –∂–∏—Ä–Ω–∏–π, –∑ –µ–º–æ–¥–∑—ñ.
    ‚Ä¢ –ü—ñ–¥—Ä–æ–∑–¥—ñ–ª–∏: ‚Äúü§Ø –£—è–≤–∏‚Äù, ‚Äúüí° –©–æ —Ü–µ‚Äù, ‚Äúüõ† –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î / –Ω–∞–≤—ñ—â–æ‚Äù, ‚Äú‚ö†Ô∏è –ü—ñ–¥–≤–æ–¥–Ω—ñ –∫–∞–º–µ–Ω—ñ‚Äù, ‚Äú‚ú® –í–∏—Å–Ω–æ–≤–æ–∫‚Äù.
    ‚Ä¢ –ñ–∏–≤–∏–π —Å—Ç–∏–ª—å, –∫–æ—Ä–æ—Ç–∫—ñ —Ä–µ—á–µ–Ω–Ω—è, –±–µ–∑ –≤–æ–¥–∏.
    ‚Ä¢ –î–æ 2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –∫–æ–¥—É (js –∞–±–æ html).
    –ó–≥–µ–Ω–µ—Ä—É–π –ø–æ—Å—Ç –¥–ª—è —Ç–µ–º–∏: "${question}"
    `;

        const postResult = await model.generateContent(postPrompt);
        let styledPost = postResult.response.text();
        styledPost = styledPost
            .replace(/[*_`<>]/g, '')
            .replace(/\n{3,}/g, '\n\n')
            .trim();
        await ctx.telegram.sendMessage(targetChatId, styledPost, { parse_mode: undefined });
    } catch (err) {
        console.error(err);
        await ctx.reply('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è.');
    }
});

// === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ü–∏—Ç–∞—Ç–∏ ===
bot.hears('üé≠ –°–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', async ctx => {
    await ctx.reply('üòé –ì–µ–Ω–µ—Ä—É—é –Ω–∞—Å—Ç—Ä—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞...');

    const quotePrompt = `
    –ü—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫—É –¥–æ—Ç–µ–ø–Ω—É —Ü–∏—Ç–∞—Ç—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (–¥–æ 200 —Å–∏–º–≤–æ–ª—ñ–≤),
    —è–∫–∞ –æ–ø–∏—Å—É—î –Ω–∞—Å—Ç—Ä—ñ–π, –∂–∏—Ç—Ç—è –∞–±–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞.
    –§–æ—Ä–º–∞—Ç:
    - –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∞ –∞–±–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞
    - –º–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –∑ –µ–º–æ–¥–∑—ñ
    - —É —Å—Ç–∏–ª—ñ Telegram: –∫–æ—Ä–æ—Ç–∫–æ, –∑ —ñ—Ä–æ–Ω—ñ—î—é –∞–±–æ —Å–∞–º–æ—ñ—Ä–æ–Ω—ñ—î—é
    - –±–µ–∑ –ª–∞–ø–æ–∫ —ñ –±–µ–∑ Markdown
    –ü—Ä–∏–∫–ª–∞–¥–∏:
    üíª –ö–æ–¥ ‚Äî —è–∫ –∫–∞–≤–∞: –≥—ñ—Ä–∫–∏–π, –∞–ª–µ –±–µ–∑ –Ω—å–æ–≥–æ –Ω—ñ—è–∫.
    üß† –Ø–∫—â–æ –ø—Ä–∞—Ü—é—î ‚Äî –Ω–µ —á—ñ–ø–∞–π. –Ø–∫—â–æ –Ω–µ –ø—Ä–∞—Ü—é—î ‚Äî —Ç–µ–∂ –Ω–µ —á—ñ–ø–∞–π, –ø–æ–∫–∏ –Ω–µ –≤–∏–ø‚Äô—î—à –∫–∞–≤–∏.
    üî• –Ø –Ω–µ –ø–æ–º–∏–ª—è—é—Å—å ‚Äî —è –ø—Ä–æ—Å—Ç–æ —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤—ñ —Ñ—ñ—á—ñ –≤–∏–ø–∞–¥–∫–æ–≤–æ.
    `;

    try {
        const quoteResult = await model.generateContent(quotePrompt);
        let quote = quoteResult.response.text().trim();

        quote = quote
            .replace(/[*_`<>]/g, '')
            .replace(/\n{2,}/g, '\n')
            .trim();

        await ctx.reply(`üí¨ <b>–¶–∏—Ç–∞—Ç–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞:</b>\n\n${quote}`, { parse_mode: 'HTML' });
    } catch (err) {
        console.error(err);
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ü–∏—Ç–∞—Ç—É.');
    }
});

bot.launch();
console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π (–∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥—É)!');
