import dotenv from 'dotenv';
import fs from 'fs';
import { Telegraf, Markup } from 'telegraf';
import { GoogleGenerativeAI } from '@google/generative-ai';

dotenv.config();

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({
    model: 'gemini-2.0-flash',
    generationConfig: {
        temperature: 0.95,
        maxOutputTokens: 2048,
        topP: 0.9,
        topK: 40
    }
});

const ALLOWED_USERNAMES_STRING = process.env.ALLOWED_USERNAMES || '';
const ALLOWED_USERNAMES = ALLOWED_USERNAMES_STRING.split(',').map(name => name.trim().toLowerCase()).filter(name => name.length > 0);

const USED_TOPICS_FILE = './used_topics.json';
let usedTopics = loadUsedTopics();

const MODE_CONFIG = {
    blog: {
        topicsPrompt: (num) => `–ü—Ä–∏–¥—É–º–∞–π ${num} –∫–æ—Ä–æ—Ç–∫–∏—Ö, –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö —ñ–¥–µ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É –ø—Ä–æ —Ä–æ–±–æ—Ç—É —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞, –∂–∏—Ç—Ç—è —É —Å—Ñ–µ—Ä—ñ IT, VUE, JS, –≤–µ—Ä—Å—Ç–∫—É, TS, –º–æ—Ç–∏–≤–∞—Ü—ñ—é, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó, AI –∞–±–æ Node.js. –ö–æ–∂–Ω–∞ —ñ–¥–µ—è: –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫. –§–æ—Ä–º–∞—Ç: 1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞ ...`,
        postPrompt: (text) => `–°—Ç–≤–æ—Ä–∏ –≤–µ–ª–∏–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (1500 —Å–∏–º–≤–æ–ª—ñ–≤) —É —Å—Ç–∏–ª—ñ —Å—É—á–∞—Å–Ω–æ–≥–æ IT-–±–ª–æ–≥—É. –¢–µ–º–∞: "${text}"`,
        topicMessage: 'üåÄ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–¥–µ–π –¥–ª—è –±–ª–æ–≥—É...',
        selectMessage: '–û–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –±–ª–æ–≥—É:',
        regenerateText: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏',
        generatingPostMessage: '‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –±–ª–æ–≥-–ø–æ—Å—Ç...',
        postStartMessage: (text) => `‚ú® **–Ü–¥–µ—è –¥–ª—è –±–ª–æ–≥—É:**\n\n${text}`
    },
    blog_figma: {
        topicsPrompt: (num) => `–ü—Ä–∏–¥—É–º–∞–π ${num} –∫–æ—Ä–æ—Ç–∫–∏—Ö, –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏—Ö —ñ–¥–µ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É –ø—Ä–æ UI/UX –¥–∏–∑–∞–π–Ω, Figma, –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º–∏, –∫–∞—Ä'—î—Ä—É –¥–∏–∑–∞–π–Ω–µ—Ä–∞, —Ç—Ä–µ–Ω–¥–∏ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏. –ö–æ–∂–Ω–∞ —ñ–¥–µ—è: –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫. –§–æ—Ä–º–∞—Ç: 1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞ ...`,
        postPrompt: (text) => `–°—Ç–≤–æ—Ä–∏ –≤–µ–ª–∏–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é (1500 —Å–∏–º–≤–æ–ª—ñ–≤) —É —Å—Ç–∏–ª—ñ —Å—É—á–∞—Å–Ω–æ–≥–æ UI/UX –±–ª–æ–≥—É. –¢–µ–º–∞: "${text}"`,
        topicMessage: 'üé® –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —ñ–¥–µ–π –¥–ª—è –¥–∏–∑–∞–π–Ω-–±–ª–æ–≥—É...',
        selectMessage: '–û–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –¥–∏–∑–∞–π–Ω-–±–ª–æ–≥—É:',
        regenerateText: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏',
        generatingPostMessage: '‚úçÔ∏è –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω–∏–π –¥–∏–∑–∞–π–Ω-–ø–æ—Å—Ç...',
        postStartMessage: (text) => `‚ú® **–Ü–¥–µ—è –¥–ª—è –¥–∏–∑–∞–π–Ω-–±–ª–æ–≥—É:**\n\n${text}`
    },
    task: {
        topicsPrompt: (num) => `–°—Ç–≤–æ—Ä–∏ ${num} –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤ (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫) –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á –∑ JavaScript (–º–∞—Å–∏–≤–∏, –ª–æ–≥—ñ–∫–∞, –¥–∞—Ç–∏). –§–æ—Ä–º–∞—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π: 1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞ ...`,
        postPrompt: (text) => `–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –ø—Ä–∞–∫—Ç–∏—á–Ω—É –∑–∞–¥–∞—á—É –∑ JavaScript —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é. –¢–µ–º–∞: "${text}". –§–æ—Ä–º–∞—Ç: üß© –ó–∞–¥–∞—á–∞: –æ–ø–∏—Å, üì¶ –ü—Ä–∏–∫–ª–∞–¥: –∫–æ–¥ JS, üîç –£—Ç–æ—á–Ω–µ–Ω–Ω—è: —É–º–æ–≤–∏. –î–æ 1000 —Å–∏–º–≤–æ–ª—ñ–≤.`,
        topicMessage: '‚öôÔ∏è –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö JS-–∑–∞–¥–∞—á...',
        selectMessage: '–û–±–µ—Ä–∏ –∑–∞–¥–∞—á—É:',
        regenerateText: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ',
        generatingPostMessage: 'üîß –ì–µ–Ω–µ—Ä—É—é –¥–µ—Ç–∞–ª—ñ –∑–∞–¥–∞—á—ñ...',
        postStartMessage: (text) => `üéØ **–í–∏–±—Ä–∞–Ω–∞ –∑–∞–¥–∞—á–∞:** ${text}`
    },
    quiz: {
        topicsPrompt: (num) => `–°—Ç–≤–æ—Ä–∏ ${num} –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤ (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫) –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É (HTML, CSS, JavaScript –∞–±–æ Vue.js). –§–æ—Ä–º–∞—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π: 1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞ ...`,
        topicMessage: 'üîÑ –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–º –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω...',
        selectMessage: '–û–±–µ—Ä–∏ —Ç–µ–º—É –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:',
        regenerateText: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏',
        placeholders: [
            '‚ùì JavaScript –ó–∞–º–∏–∫–∞–Ω–Ω—è', '‚ùì CSS Grid vs Flexbox', '‚ùì –ü—Ä–æ–º—ñ—Å–∏ —Ç–∞ Async/Await',
            '‚ùì –©–æ —Ç–∞–∫–µ Virtual DOM', '‚ùì –û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—ñ –≤ JS'
        ]
    },
    quiz_figma: {
        topicsPrompt: (num) => `–°—Ç–≤–æ—Ä–∏ ${num} –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤ (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤, –∑ –µ–º–æ–¥–∑—ñ, –±–µ–∑ –ª–∞–ø–æ–∫) –¥–ª—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω –∑ UI/UX –¥–∏–∑–∞–π–Ω—É, Figma, —Ç–∏–ø–æ–≥—Ä–∞—Ñ—ñ–∫–∏ –∞–±–æ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º. –§–æ—Ä–º–∞—Ç –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π: 1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞ ...`,
        topicMessage: 'üìê –ì–µ–Ω–µ—Ä—É—é —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç–µ–º –¥–ª—è –¥–∏–∑–∞–π–Ω-–≤—ñ–∫—Ç–æ—Ä–∏–Ω...',
        selectMessage: '–û–±–µ—Ä–∏ —Ç–µ–º—É –¥–∏–∑–∞–π–Ω-–≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:',
        regenerateText: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏',
        placeholders: [
            '‚ùì –ö–æ–ª—å–æ—Ä–æ–≤–∞ –º–æ–¥–µ–ª—å CMYK', '‚ùì –ü—Ä–∏–Ω—Ü–∏–ø–∏ –ì–µ—à—Ç–∞–ª—å—Ç—É', '‚ùì –ê–≤—Ç–æ–ª–µ–π–∞—É—Ç —É Figma',
            '‚ùì –•-–≤–∏—Å–æ—Ç–∞ —à—Ä–∏—Ñ—Ç—É', '‚ùì –ü—Ä–æ—Ç–æ—Ç–∏–ø—É–≤–∞–Ω–Ω—è –≤ UI/UX'
        ]
    },
    quote: {
        topicsPrompt: (num) => `–ü—Ä–∏–¥—É–º–∞–π ${num} –∫–æ—Ä–æ—Ç–∫–∏—Ö, –¥–æ—Ç–µ–ø–Ω–∏—Ö —Ü–∏—Ç–∞—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –ø—Ä–æ –∂–∏—Ç—Ç—è –∞–±–æ —Ñ—ñ–ª–æ—Å–æ—Ñ—ñ—é —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞/–∞–π—Ç—ñ—à–Ω–∏–∫–∞. –ö–æ–∂–Ω–∞ —Ü–∏—Ç–∞—Ç–∞: –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤, –±–µ–∑ –ª–∞–ø–æ–∫, –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ. –§–æ—Ä–º–∞—Ç: 1) –µ–º–æ–¥–∑—ñ + —Ü–∏—Ç–∞—Ç–∞ ...`,
        topicMessage: 'üòé –ì–µ–Ω–µ—Ä—É—é —Ü–∏—Ç–∞—Ç —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞...',
        selectMessage: '–û–±–µ—Ä–∏ —Ü–∏—Ç–∞—Ç—É:',
        regenerateText: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç–∏',
        postStartMessage: (text) => `üí¨ **–í–∏–±—Ä–∞–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞:**\n\n${cleanPostText(text)}`,
        skipPostGeneration: true
    },
    story: {
        topicsPrompt: (num) => `–ü—Ä–∏–¥—É–º–∞–π ${num} –∫–æ—Ä–æ—Ç–∫–∏—Ö, –¥—É–∂–µ –∫–ª—ñ–∫–±–µ–π—Ç–Ω–∏—Ö, —à–æ–∫—É—é—á–∏—Ö —ñ–¥–µ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-—ñ—Å—Ç–æ—Ä—ñ–π –ø—Ä–æ IT, –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, –≥—Ä–æ—à—ñ, –Ω–µ–≤–¥–∞—á—ñ, –∫–∞—Ä'—î—Ä—É, —Ñ—Ä—ñ–ª–∞–Ω—Å. –ö–æ–∂–Ω–∞ —ñ–¥–µ—è: –¥–æ 70 —Å–∏–º–≤–æ–ª—ñ–≤, –ø–æ—á–Ω–∏ –∑ –µ–º–æ–¥–∑—ñ (ü§Ø, üí∞, üö®, üò±, üòà), –±–µ–∑ –ª–∞–ø–æ–∫. –§–æ—Ä–º–∞—Ç: 1) –µ–º–æ–¥–∑—ñ + –Ω–∞–∑–≤–∞ ...`,
        topicMessage: 'üìñ –ì–µ–Ω–µ—Ä—É—é –∫–ª—ñ–∫–±–µ–π—Ç–Ω–∏—Ö —ñ–¥–µ–π –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ–π...',
        selectMessage: '–û–±–µ—Ä–∏ —Ç–µ–º—É –¥–ª—è –∫–ª—ñ–∫–±–µ–π—Ç —ñ—Å—Ç–æ—Ä—ñ—ó:',
        regenerateText: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏'
    }
};

const activeGenerations = new Map();
const userTopics = new Map();
const userCurrentMode = new Map();

function loadUsedTopics() {
    if (fs.existsSync(USED_TOPICS_FILE)) {
        try {
            return JSON.parse(fs.readFileSync(USED_TOPICS_FILE, 'utf-8'));
        } catch {
            return [];
        }
    }
    return [];
}

function saveUsedTopic(topic) {
    usedTopics.push(topic);
    if (usedTopics.length > 500) {
        usedTopics = usedTopics.slice(-500);
    }
    fs.writeFileSync(USED_TOPICS_FILE, JSON.stringify(usedTopics, null, 2));
}

function getText(result) {
    return (
        result?.response?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
        result?.response?.text?.trim() ||
        ''
    );
}

function similarityRatio(a, b) {
    a = a.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    b = b.toLowerCase().replace(/[^\p{L}\p{N}]+/gu, '');
    if (!a.length || !b.length) return 0;
    let same = 0;
    for (let i = 0; i < Math.min(a.length, b.length); i++) {
        if (a[i] === b[i]) same++;
    }
    return same / Math.max(a.length, b.length);
}

function isDuplicateIdea(newText) {
    return usedTopics.some(oldText => similarityRatio(oldText, newText) > 0.8);
}

function cleanPostText(text) {
    return text.replace(/[*_`<>]/g, '').replace(/\n{3,}/g, '\n\n').trim();
}

function checkAccess(ctx) {
    if (ALLOWED_USERNAMES.length === 0) return true;
    const userUsername = ctx.from?.username?.toLowerCase();

    if (userUsername && ALLOWED_USERNAMES.includes(userUsername)) {
        return true;
    }
    ctx.reply('‚ùå –ó–∞–π–Ω—è—Ç–∏–π. –Ü–¥–∏ –Ω–∞—Ö—É–π.', getMainKeyboard());
    return false;
}

function getMainKeyboard() {
    return Markup.keyboard([
        ['ü§ñ FrontEnd - JavaScript | TypeScript', 'üé® FrontEnd UI - Figma –º–∞–∫–µ—Ç–∏']
    ]).resize();
}

function getSubMenuKeyboard() {
    return Markup.keyboard([
        ['üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', 'üß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è'],
        ['üé≠ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', 'üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É'],
        ['üìñ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é'],
        ['‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
    ]).resize();
}

function getFigmaSubMenuKeyboard() {
    return Markup.keyboard([
        ['üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥ (Figma)', 'üß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (Figma)'],
        ['‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é']
    ]).resize();
}

function getTopicsKeyboard(topics, regenerateText, backText = '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
    const keyboard = [];
    for (let i = 0; i < topics.length; i += 2) {
        keyboard.push(topics.slice(i, i + 2));
    }
    keyboard.push([regenerateText]);
    keyboard.push([backText]);
    return Markup.keyboard(keyboard).resize();
}

function protectedGeneration(ctx, type, generator) {
    const chatId = ctx.chat.id;
    if (activeGenerations.has(chatId)) {
        ctx.reply('‚è≥ **–£–í–ê–ì–ê!** –ü–æ–ø–µ—Ä–µ–¥–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞—á–µ–∫–∞–π ‚úã', { parse_mode: 'Markdown' });
        return;
    }

    activeGenerations.set(chatId, { type, startTime: Date.now() });
    (async () => {
        try {
            await generator(ctx);
        } catch (error) {
            console.error(`‚ùå Generation error (${type}):`, error);
            ctx.reply('‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.');
        } finally {
            activeGenerations.delete(chatId);
        }
    })();
}

async function generateTopics(ctx, mode) {
    const chatId = ctx.chat.id;
    const config = MODE_CONFIG[mode];
    const numTopics = (mode === 'quote') ? 10 : 5;

    await ctx.reply(config.topicMessage.replace('—É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö', `${numTopics} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö`));

    const prompt = config.topicsPrompt(numTopics);
    const result = await model.generateContent([prompt]);
    const text = getText(result);

    const lines = text.split('\n').filter(l => l.trim());
    const newTopics = [];

    for (const line of lines) {
        const match = line.match(/^\d+\)\s*(.+)$/);
        if (match && newTopics.length < numTopics) {
            const idea = match[1].trim();
            if (!isDuplicateIdea(idea)) {
                newTopics.push(idea);
            }
        }
    }

    if ((mode === 'quiz' || mode === 'quiz_figma') && newTopics.length < numTopics && config.placeholders) {
        while (newTopics.length < numTopics && config.placeholders.length > 0) {
            newTopics.push(config.placeholders.shift());
        }
    }

    if (newTopics.length === 0) {
        const backKeyboard = (mode === 'blog_figma' || mode === 'quiz_figma') ? getFigmaSubMenuKeyboard() : getSubMenuKeyboard();
        await ctx.reply(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–∏—Ö —Ç–µ–º –¥–ª—è ${mode} üòÖ`, backKeyboard);
        return;
    }

    userTopics.set(chatId, { mode, topics: newTopics });
    userCurrentMode.set(chatId, mode);

    await ctx.reply(config.selectMessage, getTopicsKeyboard(newTopics, config.regenerateText));
}

async function generateContentPost(ctx, mode, text) {
    const chatId = ctx.chat.id;
    const config = MODE_CONFIG[mode];

    await ctx.reply(config.postStartMessage(text), { parse_mode: 'Markdown' });

    if (config.skipPostGeneration) {
        saveUsedTopic(text);
        userTopics.delete(chatId);
        const newMode = mode === 'blog_figma' ? 'sub_menu_figma' : 'sub_menu_js';
        const backKeyboard = mode === 'blog_figma' ? getFigmaSubMenuKeyboard() : getSubMenuKeyboard();

        userCurrentMode.set(chatId, newMode);
        await ctx.reply('–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–ª—ñ:', backKeyboard);
        return;
    }

    await ctx.reply(config.generatingPostMessage);

    const postRes = await model.generateContent([config.postPrompt(text)]);
    const postText = getText(postRes);

    const newMode = mode === 'blog_figma' ? 'sub_menu_figma' : 'sub_menu_js';
    const backKeyboard = mode === 'blog_figma' ? getFigmaSubMenuKeyboard() : getSubMenuKeyboard();

    if (!postText) {
        userCurrentMode.set(chatId, newMode);
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ üòî', backKeyboard);
        return;
    }

    const styledPost = cleanPostText(postText);

    saveUsedTopic(text);
    userTopics.delete(chatId);
    userCurrentMode.set(chatId, newMode);

    await ctx.reply(styledPost, backKeyboard);
}

async function generateQuizPost(ctx, text, mode) {
    const chatId = ctx.chat.id;

    await ctx.reply(`üéØ **–í–∏–±—Ä–∞–Ω–∞ —Ç–µ–º–∞ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:** ${text}`, { parse_mode: 'Markdown' });
    await ctx.reply('üìù –ì–µ–Ω–µ—Ä—É—é –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø–æ—Å—Ç...');

    const promptBase = mode === 'quiz_figma'
        ? '–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ UI/UX –¥–∏–∑–∞–π–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –Ω–∞ —Ç–µ–º—É'
        : '–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Å–∫–ª–∞–¥–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –Ω–∞ —Ç–µ–º—É';

    const prompt = `${promptBase} "${text}" (–¥–æ 300 —Å–∏–º–≤–æ–ª—ñ–≤). –§–æ—Ä–º–∞—Ç: QUESTION: —Ç–µ–∫—Å—Ç\nOPTIONS:\n1) –≤–∞—Ä—ñ–∞–Ω—Ç\n2) –≤–∞—Ä—ñ–∞–Ω—Ç\n3) –≤–∞—Ä—ñ–∞–Ω—Ç\n4) –≤–∞—Ä—ñ–∞–Ω—Ç\nCORRECT: –Ω–æ–º–µ—Ä\nEXPLANATION: –ø–æ—è—Å–Ω–µ–Ω–Ω—è`;
    const res = await model.generateContent([prompt]);
    const responseText = getText(res);

    const qMatch = responseText.match(/^QUESTION:\s*(.+?)\n/ms);
    const question = qMatch?.[1]?.trim();
    const optionsBlock = responseText.match(/OPTIONS:([\s\S]*?)\nCORRECT:/ms)?.[1] || '';
    const options = optionsBlock.split(/\d\)\s*/).filter(Boolean).map(o => o.trim().slice(0, 70)).filter(o => o.length > 0);
    const correct = Number(responseText.match(/CORRECT:\s*(\d)/)?.[1]) - 1;
    const explanation = responseText.match(/EXPLANATION:\s*(.+)/is)?.[1]?.trim()?.slice(0, 200) || '–í—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ—è—Å–Ω—é—î—Ç—å—Å—è —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ—Å—Ç—ñ!';

    const isFigmaQuiz = mode === 'quiz_figma';
    const backKeyboard = isFigmaQuiz ? getFigmaSubMenuKeyboard() : getSubMenuKeyboard();
    const newMode = isFigmaQuiz ? 'sub_menu_figma' : 'sub_menu_js';

    if (!question || options.length < 4 || correct < 0 || correct >= options.length) {
        await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ üòî', backKeyboard);
        userTopics.delete(chatId);
        userCurrentMode.set(chatId, newMode);
        return;
    }

    await ctx.telegram.sendPoll(ctx.chat.id, question, options, {
        type: 'quiz',
        correct_option_id: correct,
        explanation: explanation,
        is_anonymous: true
    });

    const postPrompt = `–°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç (700‚Äì1200 —Å–∏–º–≤–æ–ª—ñ–≤) –¥–ª—è —Ç–µ–º–∏ "${question}" —É —Å—Ç–∏–ª—ñ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.`;
    const postRes = await model.generateContent([postPrompt]);
    const postText = getText(postRes);

    saveUsedTopic(text);
    userTopics.delete(chatId);
    userCurrentMode.set(chatId, newMode);

    if (postText) {
        await ctx.telegram.sendMessage(ctx.chat.id, cleanPostText(postText), backKeyboard);
    } else {
        await ctx.reply('‚úÖ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞!', backKeyboard);
    }
}

async function generateStoryParts(ctx, text) {
    const chatId = ctx.chat.id;
    await ctx.reply(`üö® –í–∏–±—Ä–∞–Ω–∞ –∫–ª—ñ–∫–±–µ–π—Ç —Ç–µ–º–∞:\n\n${text}`);

    const waitMessage = await ctx.reply('üìö –ì–µ–Ω–µ—Ä—É—é –ø–æ–≤–Ω—É —ñ—Å—Ç–æ—Ä—ñ—é...');

    try {
        const prompt = `–°—Ç–≤–æ—Ä–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –∫–ª—ñ–∫–±–µ–π—Ç-—ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏–±–ª–∏–∑–Ω–æ –Ω–∞ 3300 —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ —Ç–µ–º—É "${text}". –†–æ–∑–∫–∞–∂–∏ —ó—ó –≤—ñ–¥ –ø–µ—Ä—à–æ—ó –æ—Å–æ–±–∏ (–Ø) —É —Å—Ç–∏–ª—ñ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–ª–æ–≥—É. –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø–æ—á–∞—Ç–æ–∫ (—ñ–Ω—Ç—Ä–∏–≥–∞), —Å–µ—Ä–µ–¥–∏–Ω–∞ (–ø—Ä–æ–±–ª–µ–º–∞/–¥—Ä–∞–º–∞), –∫—ñ–Ω–µ—Ü—å (—Ä–æ–∑–≤'—è–∑–∫–∞, –º–æ—Ä–∞–ª—å). –ù–µ –ø–∏—à–∏ "–ß–∞—Å—Ç–∏–Ω–∞ 1" –∞–±–æ –ø–æ–¥—ñ–±–Ω–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–≤–∏—á–∞–π–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è.`;

        const res = await model.generateContent([prompt]);
        let fullText = getText(res) || '';

        fullText = fullText
            .replace(/[*_`~>#+=|{}[\]]/g, '')
            .replace(/<\/?[^>]+(>|$)/g, '')
            .replace(/\s{2,}/g, ' ')
            .replace(/&[^;\s]+;/g, '')
            .trim();

        if (fullText.length < 500) {
            await ctx.telegram.deleteMessage(chatId, waitMessage.message_id).catch(() => {});
            await ctx.reply('‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòî', getSubMenuKeyboard());
            return;
        }

        const sentences = fullText.split(/(?<=[.!?])\s+/);
        const targetLen = Math.ceil(sentences.length / 3);
        const parts = [
            sentences.slice(0, targetLen).join(' '),
            sentences.slice(targetLen, targetLen * 2).join(' '),
            sentences.slice(targetLen * 2).join(' ')
        ].map(p => p.trim());

        await ctx.telegram.deleteMessage(chatId, waitMessage.message_id).catch(() => {});

        await ctx.reply(`ü§Ø –Ü—Å—Ç–æ—Ä—ñ—è: ${text} ‚Äì –ß–∞—Å—Ç–∏–Ω–∞ 1/3\n\n${parts[0]}\n\n–ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –±—É–¥–µ –∑–∞–≤—Ç—Ä–∞!`);
        await ctx.reply(`üí∞ –Ü—Å—Ç–æ—Ä—ñ—è: ${text} ‚Äì –ß–∞—Å—Ç–∏–Ω–∞ 2/3\n\n${parts[1]}\n\n–ö—ñ–Ω–µ—Ü—å —É–∂–µ –±–ª–∏–∑—å–∫–æ...`);
        await ctx.reply(`‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è: ${text} ‚Äì –ß–∞—Å—Ç–∏–Ω–∞ 3/3 (–†–æ–∑–≤'—è–∑–∫–∞)\n\n${parts[2]}\n\n–ö—ñ–Ω–µ—Ü—å —ñ—Å—Ç–æ—Ä—ñ—ó. –ü–æ–¥—ñ–ª–∏—Å—è –¥—É–º–∫–∞–º–∏!`);

        saveUsedTopic(text);
        await ctx.reply('‚úÖ –£—Å—ñ 3 —á–∞—Å—Ç–∏–Ω–∏ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!', getSubMenuKeyboard());
    } catch (error) {
        console.error('‚ùå Story generation error:', error);
        await ctx.telegram.deleteMessage(chatId, waitMessage.message_id).catch(() => {});
        await ctx.reply('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ üòî', getSubMenuKeyboard());
    } finally {
        userTopics.delete(chatId);
        userCurrentMode.set(chatId, 'sub_menu_js');
    }
}

bot.start(async ctx => {
    if (!checkAccess(ctx)) return;

    const chatId = ctx.chat.id;
    userCurrentMode.delete(chatId);
    userTopics.delete(chatId);
    await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! üëã –û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏:', getMainKeyboard());
});

bot.hears('ü§ñ FrontEnd - JavaScript | TypeScript', async ctx => {
    if (!checkAccess(ctx)) return;
    const chatId = ctx.chat.id;
    userCurrentMode.set(chatId, 'sub_menu_js');
    userTopics.delete(chatId);
    await ctx.reply('–û–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è JavaScript | TypeScript:', getSubMenuKeyboard());
});

bot.hears('üé® FrontEnd UI - Figma –º–∞–∫–µ—Ç–∏', async ctx => {
    if (!checkAccess(ctx)) return;
    const chatId = ctx.chat.id;
    userCurrentMode.set(chatId, 'sub_menu_figma');
    userTopics.delete(chatId);
    await ctx.reply('–û–±–µ—Ä–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è Figma –º–∞–∫–µ—Ç—ñ–≤:', getFigmaSubMenuKeyboard());
});

bot.hears('‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', async ctx => {
    if (!checkAccess(ctx)) return;
    const chatId = ctx.chat.id;
    userCurrentMode.delete(chatId);
    userTopics.delete(chatId);
    await ctx.reply('–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:', getMainKeyboard());
});

bot.hears('üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'blog_topics', (ctx) => generateTopics(ctx, 'blog'));
});

bot.hears('üßÆ –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–¥–∞—á—É', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'task_topics', (ctx) => generateTopics(ctx, 'task'));
});

bot.hears('üß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', ctx => {
    if (!checkAccess(ctx)) return;
    const mode = userCurrentMode.get(ctx.chat.id);
    const targetMode = mode === 'sub_menu_figma' ? 'quiz_figma' : 'quiz';
    protectedGeneration(ctx, `${targetMode}_topics`, (ctx) => generateTopics(ctx, targetMode));
});

bot.hears('üé≠ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç—É', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'quote_topics', (ctx) => generateTopics(ctx, 'quote'));
});

bot.hears('üìñ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'story_topics', (ctx) => generateTopics(ctx, 'story'));
});

bot.hears('üß† –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –±–ª–æ–≥ (Figma)', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'blog_figma_topics', (ctx) => generateTopics(ctx, 'blog_figma'));
});

bot.hears('üß© –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (Figma)', ctx => {
    if (!checkAccess(ctx)) return;
    protectedGeneration(ctx, 'quiz_figma_topics', (ctx) => generateTopics(ctx, 'quiz_figma'));
});


bot.hears([
    'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏',
    'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ',
    'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏',
    'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç–∏'
], ctx => {
    if (!checkAccess(ctx)) return;
    const chatId = ctx.chat.id;
    const mode = userCurrentMode.get(chatId);
    const text = ctx.message.text;

    let topicMode = null;
    if (mode && MODE_CONFIG[mode]) {
        topicMode = mode;
    } else if (mode === 'sub_menu_js') {
        if (text === 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏') topicMode = 'blog';
        if (text === 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–∞–¥–∞—á—ñ') topicMode = 'task';
        if (text === 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏') topicMode = 'quiz';
        if (text === 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ü–∏—Ç–∞—Ç–∏') topicMode = 'quote';
    } else if (mode === 'sub_menu_figma') {
        if (text === 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ–º–∏') topicMode = 'blog_figma';
        if (text === 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏') topicMode = 'quiz_figma';
    }


    if (topicMode && MODE_CONFIG[topicMode]) {
        protectedGeneration(ctx, `${topicMode}_topics`, (ctx) => generateTopics(ctx, topicMode));
    }
});

bot.on('text', async ctx => {
    if (!checkAccess(ctx)) return;

    const chatId = ctx.chat.id;
    const text = ctx.message.text;
    const mode = userCurrentMode.get(chatId);
    const topicData = userTopics.get(chatId);

    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é') {
        const previousMode = userCurrentMode.get(chatId);
        if (topicData) {
            userTopics.delete(chatId);
        }

        if (previousMode === 'sub_menu_figma' || previousMode === 'blog_figma' || previousMode === 'quiz_figma') {
            userCurrentMode.set(chatId, 'sub_menu_figma');
            await ctx.reply('–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Figma:', getFigmaSubMenuKeyboard());
        } else {
            userCurrentMode.set(chatId, 'sub_menu_js');
            await ctx.reply('–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é JavaScript:', getSubMenuKeyboard());
        }
        return;
    }

    if (text === '‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' || Object.values(MODE_CONFIG).some(c => c.regenerateText === text)) {
        return;
    }

    if (topicData && topicData.mode === mode && topicData.topics.includes(text)) {
        switch (mode) {
            case 'blog':
            case 'blog_figma':
            case 'task':
            case 'quote':
                protectedGeneration(ctx, `${mode}_post`, (ctx) => generateContentPost(ctx, mode, text));
                break;
            case 'quiz':
            case 'quiz_figma':
                protectedGeneration(ctx, `${mode}_post`, (ctx) => generateQuizPost(ctx, text, mode));
                break;
            case 'story':
                protectedGeneration(ctx, 'story_parts', (ctx) => generateStoryParts(ctx, text));
                break;
        }
        return;
    }

    if (mode === 'sub_menu_js') {
        await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é.', getSubMenuKeyboard());
    } else if (mode === 'sub_menu_figma') {
        await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –¥—ñ—é –∑ –º–µ–Ω—é.', getFigmaSubMenuKeyboard());
    } else if (mode && MODE_CONFIG[mode]) {
        await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –æ–¥–Ω—É –∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö —Ç–µ–º –∞–±–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–π —ó—Ö.', getTopicsKeyboard(topicData.topics, MODE_CONFIG[mode].regenerateText));
    } else {
        await ctx.reply('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ —Ä–æ–∑–¥—ñ–ª –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', getMainKeyboard());
    }
});

setInterval(() => {
    const now = Date.now();
    for (const [chatId, data] of activeGenerations.entries()) {
        if (now - data.startTime > 5 * 60 * 1000) {
            console.warn(`üóëÔ∏è Cleaning up stuck generation for chat ${chatId} (${data.type})`);
            activeGenerations.delete(chatId);
        }
    }
}, 60000);

bot.launch();